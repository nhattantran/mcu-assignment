
MCU-assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003c20  08003c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c8c  08003c8c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c8c  08003c8c  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c8c  08003c8c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08003c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000010c  08003da0  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003da0  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b88d  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee2  00000000  00000000  0002b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002e518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001740f  00000000  00000000  0002f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbbc  00000000  00000000  000464bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887d4  00000000  00000000  0005307b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db84f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  000db8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000010c 	.word	0x2000010c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c08 	.word	0x08003c08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000110 	.word	0x20000110
 8000148:	08003c08 	.word	0x08003c08

0800014c <isButtonPressed>:
int button_flag_1s[NO_OF_BUTTONS] = {0, 0, 0, 0};

GPIO_TypeDef* button_port[NO_OF_BUTTONS] = {BUTTON1_GPIO_Port, BUTTON2_GPIO_Port, BUTTON3_GPIO_Port, PBUTTON_GPIO_Port};
uint16_t button_pin[NO_OF_BUTTONS] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin, PBUTTON_Pin};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == FLAG_ON){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = FLAG_OFF;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000128 	.word	0x20000128

08000180 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button_flag[index] = FLAG_ON;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000128 	.word	0x20000128

080001a0 <subKeyProcess1s>:

void subKeyProcess1s(int index)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	button_flag_1s[index] = FLAG_ON;
 80001a8:	4a04      	ldr	r2, [pc, #16]	; (80001bc <subKeyProcess1s+0x1c>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2101      	movs	r1, #1
 80001ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	20000138 	.word	0x20000138

080001c0 <getKeyInput>:

void getKeyInput(){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
		  for (int i = 0; i < NO_OF_BUTTONS; i++)
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	e076      	b.n	80002ba <getKeyInput+0xfa>
		  {
			  KeyReg2[i] = KeyReg1[i];
 80001cc:	4a3f      	ldr	r2, [pc, #252]	; (80002cc <getKeyInput+0x10c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	493e      	ldr	r1, [pc, #248]	; (80002d0 <getKeyInput+0x110>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  KeyReg1[i] = KeyReg0[i];
 80001dc:	4a3d      	ldr	r2, [pc, #244]	; (80002d4 <getKeyInput+0x114>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	4939      	ldr	r1, [pc, #228]	; (80002cc <getKeyInput+0x10c>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  KeyReg0[i] = HAL_GPIO_ReadPin(button_port[i], button_pin[i]);
 80001ec:	4a3a      	ldr	r2, [pc, #232]	; (80002d8 <getKeyInput+0x118>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4939      	ldr	r1, [pc, #228]	; (80002dc <getKeyInput+0x11c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001fc:	4619      	mov	r1, r3
 80001fe:	4610      	mov	r0, r2
 8000200:	f001 fad4 	bl	80017ac <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	4619      	mov	r1, r3
 8000208:	4a32      	ldr	r2, [pc, #200]	; (80002d4 <getKeyInput+0x114>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){ //Press
 8000210:	4a2e      	ldr	r2, [pc, #184]	; (80002cc <getKeyInput+0x10c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	492e      	ldr	r1, [pc, #184]	; (80002d4 <getKeyInput+0x114>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000220:	429a      	cmp	r2, r3
 8000222:	d147      	bne.n	80002b4 <getKeyInput+0xf4>
 8000224:	4a29      	ldr	r2, [pc, #164]	; (80002cc <getKeyInput+0x10c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	4928      	ldr	r1, [pc, #160]	; (80002d0 <getKeyInput+0x110>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d13d      	bne.n	80002b4 <getKeyInput+0xf4>
				if (KeyReg2[i] != KeyReg3[i]){
 8000238:	4a25      	ldr	r2, [pc, #148]	; (80002d0 <getKeyInput+0x110>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	4927      	ldr	r1, [pc, #156]	; (80002e0 <getKeyInput+0x120>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d016      	beq.n	800027a <getKeyInput+0xba>
				  KeyReg3[i] = KeyReg2[i];
 800024c:	4a20      	ldr	r2, [pc, #128]	; (80002d0 <getKeyInput+0x110>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4922      	ldr	r1, [pc, #136]	; (80002e0 <getKeyInput+0x120>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				  if (KeyReg3[i] == PRESSED_STATE){
 800025c:	4a20      	ldr	r2, [pc, #128]	; (80002e0 <getKeyInput+0x120>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d125      	bne.n	80002b4 <getKeyInput+0xf4>
					TimeOutForKeyPress[i] = TIME_FOR_LONG_PRESSED;
 8000268:	4a1e      	ldr	r2, [pc, #120]	; (80002e4 <getKeyInput+0x124>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2164      	movs	r1, #100	; 0x64
 800026e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f7ff ff84 	bl	8000180 <subKeyProcess>
 8000278:	e01c      	b.n	80002b4 <getKeyInput+0xf4>
				  }
				}else{ // Long press
				   TimeOutForKeyPress[i]--;
 800027a:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <getKeyInput+0x124>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	1e5a      	subs	r2, r3, #1
 8000284:	4917      	ldr	r1, [pc, #92]	; (80002e4 <getKeyInput+0x124>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (TimeOutForKeyPress[i] == TIMEOUT && KeyReg3[i] == PRESSED_STATE){
 800028c:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <getKeyInput+0x124>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10d      	bne.n	80002b4 <getKeyInput+0xf4>
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <getKeyInput+0x120>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d107      	bne.n	80002b4 <getKeyInput+0xf4>
						subKeyProcess1s(i);
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f7ff ff7b 	bl	80001a0 <subKeyProcess1s>
						TimeOutForKeyPress[i] = LONG_PRESS_INTERVAL;
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <getKeyInput+0x124>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2164      	movs	r1, #100	; 0x64
 80002b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int i = 0; i < NO_OF_BUTTONS; i++)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3301      	adds	r3, #1
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b03      	cmp	r3, #3
 80002be:	dd85      	ble.n	80001cc <getKeyInput+0xc>
					  //KeyReg1[i] = NORMAL_STATE;
					}
				}
			  }
		  }
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000010 	.word	0x20000010
 80002d0:	20000020 	.word	0x20000020
 80002d4:	20000000 	.word	0x20000000
 80002d8:	20000050 	.word	0x20000050
 80002dc:	20000060 	.word	0x20000060
 80002e0:	20000030 	.word	0x20000030
 80002e4:	20000040 	.word	0x20000040

080002e8 <writePin>:
                     BUTTON1_Pin,
					 BUTTON2_Pin,
					 BUTTON3_Pin};

void writePin(int index, int value)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(portOut[index], pinOut[index], value);
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <writePin+0x2c>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <writePin+0x30>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	4619      	mov	r1, r3
 8000308:	f001 fa67 	bl	80017da <HAL_GPIO_WritePin>
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000068 	.word	0x20000068
 8000318:	20000080 	.word	0x20000080

0800031c <writePWM>:
{
	HAL_GPIO_ReadPin(portIn[index], pinIn[index]);
}

void writePWM(TIM_HandleTypeDef* htim3, int value)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SetCompare(htim3, TIM_CHANNEL_1, value);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033c:	f000 ff42 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000340:	f000 f81a 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000344:	f000 f946 	bl	80005d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000348:	f000 f91a 	bl	8000580 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800034c:	f000 f856 	bl	80003fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000350:	f000 f8a0 	bl	8000494 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000354:	2100      	movs	r1, #0
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <main+0x34>)
 8000358:	f001 ff8e 	bl	8002278 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <main+0x38>)
 800035e:	f001 fee1 	bl	8002124 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  main_fsm(&htim3, &huart2);
 8000362:	4904      	ldr	r1, [pc, #16]	; (8000374 <main+0x3c>)
 8000364:	4801      	ldr	r0, [pc, #4]	; (800036c <main+0x34>)
 8000366:	f000 fe69 	bl	800103c <main_fsm>
 800036a:	e7fa      	b.n	8000362 <main+0x2a>
 800036c:	20000190 	.word	0x20000190
 8000370:	20000148 	.word	0x20000148
 8000374:	200001d8 	.word	0x200001d8

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b090      	sub	sp, #64	; 0x40
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 ffbc 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039a:	2302      	movs	r3, #2
 800039c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a2:	2310      	movs	r3, #16
 80003a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003aa:	2300      	movs	r3, #0
 80003ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 fa49 	bl	8001850 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003c4:	f000 f9b2 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2302      	movs	r3, #2
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fcb6 	bl	8001d54 <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ee:	f000 f99d 	bl	800072c <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3740      	adds	r7, #64	; 0x40
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	463b      	mov	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_TIM2_Init+0x94>)
 800041a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_TIM2_Init+0x94>)
 8000422:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000428:	4b19      	ldr	r3, [pc, #100]	; (8000490 <MX_TIM2_Init+0x94>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_TIM2_Init+0x94>)
 8000430:	2213      	movs	r2, #19
 8000432:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_TIM2_Init+0x94>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_TIM2_Init+0x94>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000440:	4813      	ldr	r0, [pc, #76]	; (8000490 <MX_TIM2_Init+0x94>)
 8000442:	f001 fe1f 	bl	8002084 <HAL_TIM_Base_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800044c:	f000 f96e 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000454:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	4619      	mov	r1, r3
 800045c:	480c      	ldr	r0, [pc, #48]	; (8000490 <MX_TIM2_Init+0x94>)
 800045e:	f002 f973 	bl	8002748 <HAL_TIM_ConfigClockSource>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000468:	f000 f960 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_TIM2_Init+0x94>)
 800047a:	f002 fcf1 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000484:	f000 f952 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000148 	.word	0x20000148

08000494 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08e      	sub	sp, #56	; 0x38
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	f107 0320 	add.w	r3, r7, #32
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
 80004c0:	615a      	str	r2, [r3, #20]
 80004c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004c4:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <MX_TIM3_Init+0xe4>)
 80004c6:	4a2d      	ldr	r2, [pc, #180]	; (800057c <MX_TIM3_Init+0xe8>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_TIM3_Init+0xe4>)
 80004cc:	223f      	movs	r2, #63	; 0x3f
 80004ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b29      	ldr	r3, [pc, #164]	; (8000578 <MX_TIM3_Init+0xe4>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <MX_TIM3_Init+0xe4>)
 80004d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <MX_TIM3_Init+0xe4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <MX_TIM3_Init+0xe4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004ea:	4823      	ldr	r0, [pc, #140]	; (8000578 <MX_TIM3_Init+0xe4>)
 80004ec:	f001 fdca 	bl	8002084 <HAL_TIM_Base_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80004f6:	f000 f919 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000504:	4619      	mov	r1, r3
 8000506:	481c      	ldr	r0, [pc, #112]	; (8000578 <MX_TIM3_Init+0xe4>)
 8000508:	f002 f91e 	bl	8002748 <HAL_TIM_ConfigClockSource>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000512:	f000 f90b 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000516:	4818      	ldr	r0, [pc, #96]	; (8000578 <MX_TIM3_Init+0xe4>)
 8000518:	f001 fe56 	bl	80021c8 <HAL_TIM_PWM_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000522:	f000 f903 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	4619      	mov	r1, r3
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <MX_TIM3_Init+0xe4>)
 8000536:	f002 fc93 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000540:	f000 f8f4 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000544:	2360      	movs	r3, #96	; 0x60
 8000546:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <MX_TIM3_Init+0xe4>)
 800055c:	f002 f836 	bl	80025cc <HAL_TIM_PWM_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000566:	f000 f8e1 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <MX_TIM3_Init+0xe4>)
 800056c:	f000 f94e 	bl	800080c <HAL_TIM_MspPostInit>

}
 8000570:	bf00      	nop
 8000572:	3738      	adds	r7, #56	; 0x38
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000190 	.word	0x20000190
 800057c:	40000400 	.word	0x40000400

08000580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <MX_USART2_UART_Init+0x50>)
 8000588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 800058c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_USART2_UART_Init+0x4c>)
 80005b8:	f002 fcc2 	bl	8002f40 <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005c2:	f000 f8b3 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200001d8 	.word	0x200001d8
 80005d0:	40004400 	.word	0x40004400

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	4b45      	ldr	r3, [pc, #276]	; (8000700 <MX_GPIO_Init+0x12c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a44      	ldr	r2, [pc, #272]	; (8000700 <MX_GPIO_Init+0x12c>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <MX_GPIO_Init+0x12c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0310 	and.w	r3, r3, #16
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000600:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <MX_GPIO_Init+0x12c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <MX_GPIO_Init+0x12c>)
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <MX_GPIO_Init+0x12c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0320 	and.w	r3, r3, #32
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <MX_GPIO_Init+0x12c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a38      	ldr	r2, [pc, #224]	; (8000700 <MX_GPIO_Init+0x12c>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <MX_GPIO_Init+0x12c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <MX_GPIO_Init+0x12c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a32      	ldr	r2, [pc, #200]	; (8000700 <MX_GPIO_Init+0x12c>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b30      	ldr	r3, [pc, #192]	; (8000700 <MX_GPIO_Init+0x12c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|PLIGHT_G_Pin|TRAFFIC1_A_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800064e:	482d      	ldr	r0, [pc, #180]	; (8000704 <MX_GPIO_Init+0x130>)
 8000650:	f001 f8c3 	bl	80017da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLIGHT_R_Pin|TRAFFIC1_B_Pin|TRAFFIC2_B_Pin|TRAFFIC2_A_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800065a:	482b      	ldr	r0, [pc, #172]	; (8000708 <MX_GPIO_Init+0x134>)
 800065c:	f001 f8bd 	bl	80017da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_GPIO_Init+0x138>)
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4619      	mov	r1, r3
 8000674:	4826      	ldr	r0, [pc, #152]	; (8000710 <MX_GPIO_Init+0x13c>)
 8000676:	f000 ff15 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = PBUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 800067a:	2313      	movs	r3, #19
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000682:	2301      	movs	r3, #1
 8000684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	481d      	ldr	r0, [pc, #116]	; (8000704 <MX_GPIO_Init+0x130>)
 800068e:	f000 ff09 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin PLIGHT_G_Pin TRAFFIC1_A_Pin */
  GPIO_InitStruct.Pin = LED_Pin|PLIGHT_G_Pin|TRAFFIC1_A_Pin;
 8000692:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <MX_GPIO_Init+0x130>)
 80006ac:	f000 fefa 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 80006b0:	2301      	movs	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_GPIO_Init+0x134>)
 80006c4:	f000 feee 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLIGHT_R_Pin TRAFFIC1_B_Pin TRAFFIC2_B_Pin TRAFFIC2_A_Pin */
  GPIO_InitStruct.Pin = PLIGHT_R_Pin|TRAFFIC1_B_Pin|TRAFFIC2_B_Pin|TRAFFIC2_A_Pin;
 80006c8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4619      	mov	r1, r3
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <MX_GPIO_Init+0x134>)
 80006e2:	f000 fedf 	bl	80014a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2028      	movs	r0, #40	; 0x28
 80006ec:	f000 fea3 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006f0:	2028      	movs	r0, #40	; 0x28
 80006f2:	f000 febc 	bl	800146e <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	40010800 	.word	0x40010800
 8000708:	40010c00 	.word	0x40010c00
 800070c:	10110000 	.word	0x10110000
 8000710:	40011000 	.word	0x40011000

08000714 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	getKeyInput();
 800071c:	f7ff fd50 	bl	80001c0 <getKeyInput>
	timerRun();
 8000720:	f000 f9a6 	bl	8000a70 <timerRun>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <HAL_MspInit+0x5c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x5c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_MspInit+0x60>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_MspInit+0x60>)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000
 8000798:	40010000 	.word	0x40010000

0800079c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ac:	d114      	bne.n	80007d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_TIM_Base_MspInit+0x68>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <HAL_TIM_Base_MspInit+0x68>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_TIM_Base_MspInit+0x68>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	201c      	movs	r0, #28
 80007cc:	f000 fe33 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007d0:	201c      	movs	r0, #28
 80007d2:	f000 fe4c 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007d6:	e010      	b.n	80007fa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_TIM_Base_MspInit+0x6c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_TIM_Base_MspInit+0x68>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_TIM_Base_MspInit+0x68>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_TIM_Base_MspInit+0x68>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	40000400 	.word	0x40000400

0800080c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_TIM_MspPostInit+0x58>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d117      	bne.n	800085c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_TIM_MspPostInit+0x5c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <HAL_TIM_MspPostInit+0x5c>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_TIM_MspPostInit+0x5c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PBUZZER_Pin;
 8000844:	2340      	movs	r3, #64	; 0x40
 8000846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PBUZZER_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_TIM_MspPostInit+0x60>)
 8000858:	f000 fe24 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40000400 	.word	0x40000400
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x70>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d123      	bne.n	80008d8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_UART_MspInit+0x74>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <HAL_UART_MspInit+0x74>)
 8000896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089a:	61d3      	str	r3, [r2, #28]
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0x74>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_MspInit+0x74>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_UART_MspInit+0x74>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_UART_MspInit+0x74>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c0:	230c      	movs	r3, #12
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0x78>)
 80008d4:	f000 fde6 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40004400 	.word	0x40004400
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010800 	.word	0x40010800

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 fc8d 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM2_IRQHandler+0x10>)
 8000942:	f001 fd3b 	bl	80023bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000148 	.word	0x20000148

08000950 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000954:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000958:	f000 ff58 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f002 fc8e 	bl	80032b0 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20005000 	.word	0x20005000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	2000021c 	.word	0x2000021c
 80009c8:	20000268 	.word	0x20000268

080009cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <setTimer>:
#define TIMER_TICK 10
#define FLAG_ON 	1
#define FLAG_OFF 	0

void setTimer(int index, int duration)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	timer_duration[index] = duration/TIMER_TICK;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <setTimer+0x34>)
 80009e6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ea:	1092      	asrs	r2, r2, #2
 80009ec:	17db      	asrs	r3, r3, #31
 80009ee:	1ad2      	subs	r2, r2, r3
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <setTimer+0x38>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = FLAG_OFF;
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <setTimer+0x3c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2100      	movs	r1, #0
 80009fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	66666667 	.word	0x66666667
 8000a10:	20000220 	.word	0x20000220
 8000a14:	20000230 	.word	0x20000230

08000a18 <timer_timeout>:

int timer_timeout(int index)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == FLAG_ON) return 1;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <timer_timeout+0x24>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d101      	bne.n	8000a30 <timer_timeout+0x18>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e000      	b.n	8000a32 <timer_timeout+0x1a>
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000230 	.word	0x20000230

08000a40 <timer_remaining>:

int timer_remaining(int index)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	return ((timer_duration[index] / 100) + 1);
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <timer_remaining+0x28>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <timer_remaining+0x2c>)
 8000a52:	fb82 1203 	smull	r1, r2, r2, r3
 8000a56:	1152      	asrs	r2, r2, #5
 8000a58:	17db      	asrs	r3, r3, #31
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	3301      	adds	r3, #1
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000220 	.word	0x20000220
 8000a6c:	51eb851f 	.word	0x51eb851f

08000a70 <timerRun>:

void timerRun()
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMER; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	e01c      	b.n	8000ab6 <timerRun+0x46>
	{
		if(timer_duration[i] > 0)
 8000a7c:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <timerRun+0x58>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dd13      	ble.n	8000ab0 <timerRun+0x40>
		{
			timer_duration[i]--;
 8000a88:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <timerRun+0x58>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	1e5a      	subs	r2, r3, #1
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <timerRun+0x58>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_duration[i] == 0)
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <timerRun+0x58>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d104      	bne.n	8000ab0 <timerRun+0x40>
			{
				timer_flag[i] = FLAG_ON;
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <timerRun+0x5c>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMER; i++)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	dddf      	ble.n	8000a7c <timerRun+0xc>
			}
		}
	}
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	20000220 	.word	0x20000220
 8000acc:	20000230 	.word	0x20000230

08000ad0 <traffic_fsm_auto>:
int led_yellow_time = 2;
int tuning_mode = TUNE_INIT;
char writeStr[10];

void traffic_fsm_auto()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	//-------------------------------------------------
	switch (traffic1Mode)
 8000ad4:	4b81      	ldr	r3, [pc, #516]	; (8000cdc <traffic_fsm_auto+0x20c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d875      	bhi.n	8000bc8 <traffic_fsm_auto+0xf8>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <traffic_fsm_auto+0x14>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000af5 	.word	0x08000af5
 8000ae8:	08000b21 	.word	0x08000b21
 8000aec:	08000b91 	.word	0x08000b91
 8000af0:	08000b59 	.word	0x08000b59
	{
	case TRAFFIC_INIT:
			//Initialze necessary variables
			//TODO
			setTimer(TRAFFIC1_TIMER, led_green_time * 1000);
 8000af4:	4b7a      	ldr	r3, [pc, #488]	; (8000ce0 <traffic_fsm_auto+0x210>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	4619      	mov	r1, r3
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff ff68 	bl	80009d8 <setTimer>
			traffic1Mode = GREEN;
 8000b08:	4b74      	ldr	r3, [pc, #464]	; (8000cdc <traffic_fsm_auto+0x20c>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC1_A, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fbe9 	bl	80002e8 <writePin>
			writePin(TRAFFIC1_B, 1);
 8000b16:	2101      	movs	r1, #1
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fbe5 	bl	80002e8 <writePin>
			break;
 8000b1e:	e05a      	b.n	8000bd6 <traffic_fsm_auto+0x106>
	case RED:
		//Implement case RED manual
		//If timeout, switch to AUTO mode
		//TODO
		if (timer_timeout(TRAFFIC1_TIMER))
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff ff79 	bl	8000a18 <timer_timeout>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d04f      	beq.n	8000bcc <traffic_fsm_auto+0xfc>
		{
			setTimer(TRAFFIC1_TIMER, led_green_time * 1000);
 8000b2c:	4b6c      	ldr	r3, [pc, #432]	; (8000ce0 <traffic_fsm_auto+0x210>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b34:	fb02 f303 	mul.w	r3, r2, r3
 8000b38:	4619      	mov	r1, r3
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff4c 	bl	80009d8 <setTimer>
			traffic1Mode = GREEN;
 8000b40:	4b66      	ldr	r3, [pc, #408]	; (8000cdc <traffic_fsm_auto+0x20c>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC1_A, 0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fbcd 	bl	80002e8 <writePin>
			writePin(TRAFFIC1_B, 1);
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fbc9 	bl	80002e8 <writePin>
		}
		break;
 8000b56:	e039      	b.n	8000bcc <traffic_fsm_auto+0xfc>
	case YELLOW:
		//Implement case YELLOW manual
		//If timeout, switch to AUTO mode
		//TODO
		if (timer_timeout(TRAFFIC1_TIMER))
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ff5d 	bl	8000a18 <timer_timeout>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d035      	beq.n	8000bd0 <traffic_fsm_auto+0x100>
		{
			setTimer(TRAFFIC1_TIMER, led_red_time * 1000);
 8000b64:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <traffic_fsm_auto+0x214>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b6c:	fb02 f303 	mul.w	r3, r2, r3
 8000b70:	4619      	mov	r1, r3
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ff30 	bl	80009d8 <setTimer>
			traffic1Mode = RED;
 8000b78:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <traffic_fsm_auto+0x20c>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC1_A, 1);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fbb1 	bl	80002e8 <writePin>
			writePin(TRAFFIC1_B, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff fbad 	bl	80002e8 <writePin>
		}
		break;
 8000b8e:	e01f      	b.n	8000bd0 <traffic_fsm_auto+0x100>
	case GREEN:
		//Implement case GREEN manual
		//If timeout, switch to AUTO mode
		//TODO
		if (timer_timeout(TRAFFIC1_TIMER))
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff ff41 	bl	8000a18 <timer_timeout>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d01b      	beq.n	8000bd4 <traffic_fsm_auto+0x104>
		{
			setTimer(TRAFFIC1_TIMER, led_yellow_time * 1000);
 8000b9c:	4b52      	ldr	r3, [pc, #328]	; (8000ce8 <traffic_fsm_auto+0x218>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba4:	fb02 f303 	mul.w	r3, r2, r3
 8000ba8:	4619      	mov	r1, r3
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff ff14 	bl	80009d8 <setTimer>
			traffic1Mode = YELLOW;
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <traffic_fsm_auto+0x20c>)
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC1_A, 1);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fb95 	bl	80002e8 <writePin>
			writePin(TRAFFIC1_B, 1);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fb91 	bl	80002e8 <writePin>
		}
		break;
 8000bc6:	e005      	b.n	8000bd4 <traffic_fsm_auto+0x104>
	default:
		break;
 8000bc8:	bf00      	nop
 8000bca:	e004      	b.n	8000bd6 <traffic_fsm_auto+0x106>
		break;
 8000bcc:	bf00      	nop
 8000bce:	e002      	b.n	8000bd6 <traffic_fsm_auto+0x106>
		break;
 8000bd0:	bf00      	nop
 8000bd2:	e000      	b.n	8000bd6 <traffic_fsm_auto+0x106>
		break;
 8000bd4:	bf00      	nop
	}
	//-------------------------------------------------
	switch (traffic2Mode)
 8000bd6:	4b45      	ldr	r3, [pc, #276]	; (8000cec <traffic_fsm_auto+0x21c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d874      	bhi.n	8000cc8 <traffic_fsm_auto+0x1f8>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <traffic_fsm_auto+0x114>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000bf5 	.word	0x08000bf5
 8000be8:	08000c21 	.word	0x08000c21
 8000bec:	08000c91 	.word	0x08000c91
 8000bf0:	08000c59 	.word	0x08000c59
	{
	case TRAFFIC_INIT:
		//Initialze necessary variables
		//TODO
		setTimer(TRAFFIC2_TIMER, led_red_time * 1000);
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <traffic_fsm_auto+0x214>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fee8 	bl	80009d8 <setTimer>
		traffic2Mode = RED;
 8000c08:	4b38      	ldr	r3, [pc, #224]	; (8000cec <traffic_fsm_auto+0x21c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
		writePin(TRAFFIC2_A, 1);
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2002      	movs	r0, #2
 8000c12:	f7ff fb69 	bl	80002e8 <writePin>
		writePin(TRAFFIC2_B, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f7ff fb65 	bl	80002e8 <writePin>
		break;
 8000c1e:	e05a      	b.n	8000cd6 <traffic_fsm_auto+0x206>
	case RED:
		//Implement case RED manual
		//If timeout, switch to AUTO mode
		//TODO
		if (timer_timeout(TRAFFIC2_TIMER))
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fef9 	bl	8000a18 <timer_timeout>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d04f      	beq.n	8000ccc <traffic_fsm_auto+0x1fc>
		{
			setTimer(TRAFFIC2_TIMER, led_green_time * 1000);
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <traffic_fsm_auto+0x210>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fecc 	bl	80009d8 <setTimer>
			traffic2Mode = GREEN;
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <traffic_fsm_auto+0x21c>)
 8000c42:	2202      	movs	r2, #2
 8000c44:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC2_A, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fb4d 	bl	80002e8 <writePin>
			writePin(TRAFFIC2_B, 1);
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2003      	movs	r0, #3
 8000c52:	f7ff fb49 	bl	80002e8 <writePin>
		}
		break;
 8000c56:	e039      	b.n	8000ccc <traffic_fsm_auto+0x1fc>
	case YELLOW:
		//Implement case YELLOW manual
		//If timeout, switch to AUTO mode
		//TODO
		if (timer_timeout(TRAFFIC2_TIMER))
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fedd 	bl	8000a18 <timer_timeout>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d035      	beq.n	8000cd0 <traffic_fsm_auto+0x200>
		{
			setTimer(TRAFFIC2_TIMER, led_red_time * 1000);
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <traffic_fsm_auto+0x214>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff feb0 	bl	80009d8 <setTimer>
			traffic2Mode = RED;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <traffic_fsm_auto+0x21c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC2_A, 1);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2002      	movs	r0, #2
 8000c82:	f7ff fb31 	bl	80002e8 <writePin>
			writePin(TRAFFIC2_B, 0);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f7ff fb2d 	bl	80002e8 <writePin>
		}
		break;
 8000c8e:	e01f      	b.n	8000cd0 <traffic_fsm_auto+0x200>
	case GREEN:
		//Implement case GREEN manual
		//If timeout, switch to AUTO mode
		//TODO
		if (timer_timeout(TRAFFIC2_TIMER))
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff fec1 	bl	8000a18 <timer_timeout>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d01b      	beq.n	8000cd4 <traffic_fsm_auto+0x204>
		{
			setTimer(TRAFFIC2_TIMER, led_yellow_time * 1000);
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <traffic_fsm_auto+0x218>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca4:	fb02 f303 	mul.w	r3, r2, r3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fe94 	bl	80009d8 <setTimer>
			traffic2Mode = YELLOW;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <traffic_fsm_auto+0x21c>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC2_A, 1);
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f7ff fb15 	bl	80002e8 <writePin>
			writePin(TRAFFIC2_B, 1);
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff fb11 	bl	80002e8 <writePin>
		}
		break;
 8000cc6:	e005      	b.n	8000cd4 <traffic_fsm_auto+0x204>
	default:
		break;
 8000cc8:	bf00      	nop
 8000cca:	e004      	b.n	8000cd6 <traffic_fsm_auto+0x206>
		break;
 8000ccc:	bf00      	nop
 8000cce:	e002      	b.n	8000cd6 <traffic_fsm_auto+0x206>
		break;
 8000cd0:	bf00      	nop
 8000cd2:	e000      	b.n	8000cd6 <traffic_fsm_auto+0x206>
		break;
 8000cd4:	bf00      	nop
	}
	//-------------------------------------------------
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000241 	.word	0x20000241
 8000ce0:	20000098 	.word	0x20000098
 8000ce4:	20000094 	.word	0x20000094
 8000ce8:	2000009c 	.word	0x2000009c
 8000cec:	20000242 	.word	0x20000242

08000cf0 <traffic_fsm_manual>:

void traffic_fsm_manual()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	//-------------------------------------------------
	if (isButtonPressed(BUTTON_2))
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff fa29 	bl	800014c <isButtonPressed>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d07f      	beq.n	8000e00 <traffic_fsm_manual+0x110>
	{
		switch (traffic1Mode)
 8000d00:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <traffic_fsm_manual+0x11c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d83b      	bhi.n	8000d80 <traffic_fsm_manual+0x90>
 8000d08:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <traffic_fsm_manual+0x20>)
 8000d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0e:	bf00      	nop
 8000d10:	08000d21 	.word	0x08000d21
 8000d14:	08000d39 	.word	0x08000d39
 8000d18:	08000d69 	.word	0x08000d69
 8000d1c:	08000d51 	.word	0x08000d51
		{
		case TRAFFIC_INIT:
			//Initialze necessary variables
			//TODO
			traffic1Mode = GREEN;
 8000d20:	4b3a      	ldr	r3, [pc, #232]	; (8000e0c <traffic_fsm_manual+0x11c>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC1_A, 0);
 8000d26:	2100      	movs	r1, #0
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fadd 	bl	80002e8 <writePin>
			writePin(TRAFFIC1_B, 1);
 8000d2e:	2101      	movs	r1, #1
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fad9 	bl	80002e8 <writePin>
			break;
 8000d36:	e024      	b.n	8000d82 <traffic_fsm_manual+0x92>
		case RED:
			//Implement case RED manual
			//If timeout, switch to AUTO mode
			//TODO
				traffic1Mode = GREEN;
 8000d38:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <traffic_fsm_manual+0x11c>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	701a      	strb	r2, [r3, #0]
				writePin(TRAFFIC1_A, 0);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fad1 	bl	80002e8 <writePin>
				writePin(TRAFFIC1_B, 1);
 8000d46:	2101      	movs	r1, #1
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff facd 	bl	80002e8 <writePin>
			break;
 8000d4e:	e018      	b.n	8000d82 <traffic_fsm_manual+0x92>
		case YELLOW:
			//Implement case YELLOW manual
			//If timeout, switch to AUTO mode
			//TODO
				traffic1Mode = RED;
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <traffic_fsm_manual+0x11c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
				writePin(TRAFFIC1_A, 1);
 8000d56:	2101      	movs	r1, #1
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fac5 	bl	80002e8 <writePin>
				writePin(TRAFFIC1_B, 0);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fac1 	bl	80002e8 <writePin>
			break;
 8000d66:	e00c      	b.n	8000d82 <traffic_fsm_manual+0x92>
		case GREEN:
			//Implement case GREEN manual
			//If timeout, switch to AUTO mode
			//TODO
				traffic1Mode = YELLOW;
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <traffic_fsm_manual+0x11c>)
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	701a      	strb	r2, [r3, #0]
				writePin(TRAFFIC1_A, 1);
 8000d6e:	2101      	movs	r1, #1
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff fab9 	bl	80002e8 <writePin>
				writePin(TRAFFIC1_B, 1);
 8000d76:	2101      	movs	r1, #1
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff fab5 	bl	80002e8 <writePin>
			break;
 8000d7e:	e000      	b.n	8000d82 <traffic_fsm_manual+0x92>
		default:
			break;
 8000d80:	bf00      	nop
		}
		//-------------------------------------------------
		switch (traffic2Mode)
 8000d82:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <traffic_fsm_manual+0x120>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d83c      	bhi.n	8000e04 <traffic_fsm_manual+0x114>
 8000d8a:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <traffic_fsm_manual+0xa0>)
 8000d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d90:	08000da1 	.word	0x08000da1
 8000d94:	08000db9 	.word	0x08000db9
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000dd1 	.word	0x08000dd1
		{
		case TRAFFIC_INIT:
			//Initialze necessary variables
			//TODO
			traffic2Mode = RED;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <traffic_fsm_manual+0x120>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
			writePin(TRAFFIC2_A, 1);
 8000da6:	2101      	movs	r1, #1
 8000da8:	2002      	movs	r0, #2
 8000daa:	f7ff fa9d 	bl	80002e8 <writePin>
			writePin(TRAFFIC2_B, 0);
 8000dae:	2100      	movs	r1, #0
 8000db0:	2003      	movs	r0, #3
 8000db2:	f7ff fa99 	bl	80002e8 <writePin>
			break;
 8000db6:	e026      	b.n	8000e06 <traffic_fsm_manual+0x116>
		case RED:
			//Implement case RED manual
			//If timeout, switch to AUTO mode
			//TODO
				traffic2Mode = GREEN;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <traffic_fsm_manual+0x120>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	701a      	strb	r2, [r3, #0]
				writePin(TRAFFIC2_A, 0);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f7ff fa91 	bl	80002e8 <writePin>
				writePin(TRAFFIC2_B, 1);
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f7ff fa8d 	bl	80002e8 <writePin>
			break;
 8000dce:	e01a      	b.n	8000e06 <traffic_fsm_manual+0x116>
		case YELLOW:
			//Implement case YELLOW manual
			//If timeout, switch to AUTO mode
			//TODO
				traffic2Mode = RED;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <traffic_fsm_manual+0x120>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
				writePin(TRAFFIC2_A, 1);
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff fa85 	bl	80002e8 <writePin>
				writePin(TRAFFIC2_B, 0);
 8000dde:	2100      	movs	r1, #0
 8000de0:	2003      	movs	r0, #3
 8000de2:	f7ff fa81 	bl	80002e8 <writePin>
			break;
 8000de6:	e00e      	b.n	8000e06 <traffic_fsm_manual+0x116>
		case GREEN:
			//Implement case GREEN manual
			//If timeout, switch to AUTO mode
			//TODO
				traffic2Mode = YELLOW;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <traffic_fsm_manual+0x120>)
 8000dea:	2203      	movs	r2, #3
 8000dec:	701a      	strb	r2, [r3, #0]
				writePin(TRAFFIC2_A, 1);
 8000dee:	2101      	movs	r1, #1
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff fa79 	bl	80002e8 <writePin>
				writePin(TRAFFIC2_B, 1);
 8000df6:	2101      	movs	r1, #1
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f7ff fa75 	bl	80002e8 <writePin>
			break;
 8000dfe:	e002      	b.n	8000e06 <traffic_fsm_manual+0x116>
		default:
			break;
		}
	}
 8000e00:	bf00      	nop
 8000e02:	e000      	b.n	8000e06 <traffic_fsm_manual+0x116>
			break;
 8000e04:	bf00      	nop
	//-------------------------------------------------
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000241 	.word	0x20000241
 8000e10:	20000242 	.word	0x20000242

08000e14 <tuning_fsm>:
 * BUTTON3 to increase, if time > MAX_TIME then rollback to MIN_TIME
 * PES_BUTTON to save and switch to auto mode
 * BUTTON(N) -> isButtonPresed(N-1)
 * */

void tuning_fsm(){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	switch(tuning_mode){
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <tuning_fsm+0xd0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d002      	beq.n	8000e26 <tuning_fsm+0x12>
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d02d      	beq.n	8000e80 <tuning_fsm+0x6c>
					if(led_yellow_time > MAX_TIME) led_yellow_time = MIN_TIME;
				}
			}
			break;
	}
}
 8000e24:	e05c      	b.n	8000ee0 <tuning_fsm+0xcc>
			if(isButtonPressed(BUTTON_2)) tuning_mode = TUNE_YELLOW;
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff f990 	bl	800014c <isButtonPressed>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <tuning_fsm+0x26>
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <tuning_fsm+0xd0>)
 8000e34:	2203      	movs	r2, #3
 8000e36:	601a      	str	r2, [r3, #0]
			break;
 8000e38:	e04f      	b.n	8000eda <tuning_fsm+0xc6>
				writePin(TRAFFIC1_A, 0);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fa53 	bl	80002e8 <writePin>
				writePin(TRAFFIC1_B, 1);
 8000e42:	2101      	movs	r1, #1
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff fa4f 	bl	80002e8 <writePin>
				writePin(TRAFFIC2_A, 0);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff fa4b 	bl	80002e8 <writePin>
				writePin(TRAFFIC2_B, 1);
 8000e52:	2101      	movs	r1, #1
 8000e54:	2003      	movs	r0, #3
 8000e56:	f7ff fa47 	bl	80002e8 <writePin>
				if(isButtonPressed(BUTTON_3)){
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f7ff f976 	bl	800014c <isButtonPressed>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d039      	beq.n	8000eda <tuning_fsm+0xc6>
					led_green_time++;
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <tuning_fsm+0xd4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <tuning_fsm+0xd4>)
 8000e6e:	6013      	str	r3, [r2, #0]
					if(led_green_time > MAX_TIME) led_green_time = MIN_TIME;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <tuning_fsm+0xd4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b32      	cmp	r3, #50	; 0x32
 8000e76:	dd30      	ble.n	8000eda <tuning_fsm+0xc6>
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <tuning_fsm+0xd4>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	601a      	str	r2, [r3, #0]
			break;
 8000e7e:	e02c      	b.n	8000eda <tuning_fsm+0xc6>
			if(isButtonPressed(BUTTON_2)) tuning_mode = TUNE_GREEN;
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff f963 	bl	800014c <isButtonPressed>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <tuning_fsm+0x80>
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <tuning_fsm+0xd0>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	601a      	str	r2, [r3, #0]
			break;
 8000e92:	e024      	b.n	8000ede <tuning_fsm+0xca>
				writePin(TRAFFIC1_A, 1);
 8000e94:	2101      	movs	r1, #1
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fa26 	bl	80002e8 <writePin>
				writePin(TRAFFIC1_B, 1);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff fa22 	bl	80002e8 <writePin>
				writePin(TRAFFIC2_A, 1);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f7ff fa1e 	bl	80002e8 <writePin>
				writePin(TRAFFIC2_B, 1);
 8000eac:	2101      	movs	r1, #1
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f7ff fa1a 	bl	80002e8 <writePin>
				if(isButtonPressed(BUTTON_3)){
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff f949 	bl	800014c <isButtonPressed>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00e      	beq.n	8000ede <tuning_fsm+0xca>
					led_yellow_time++;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <tuning_fsm+0xd8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <tuning_fsm+0xd8>)
 8000ec8:	6013      	str	r3, [r2, #0]
					if(led_yellow_time > MAX_TIME) led_yellow_time = MIN_TIME;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <tuning_fsm+0xd8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b32      	cmp	r3, #50	; 0x32
 8000ed0:	dd05      	ble.n	8000ede <tuning_fsm+0xca>
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <tuning_fsm+0xd8>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]
			break;
 8000ed8:	e001      	b.n	8000ede <tuning_fsm+0xca>
			break;
 8000eda:	bf00      	nop
 8000edc:	e000      	b.n	8000ee0 <tuning_fsm+0xcc>
			break;
 8000ede:	bf00      	nop
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000244 	.word	0x20000244
 8000ee8:	20000098 	.word	0x20000098
 8000eec:	2000009c 	.word	0x2000009c

08000ef0 <pedestrian_fsm>:

void pedestrian_fsm(TIM_HandleTypeDef* htim3)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	switch (pedesMode)
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <pedestrian_fsm+0x138>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <pedestrian_fsm+0x16>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d065      	beq.n	8000fd0 <pedestrian_fsm+0xe0>
			writePin(PLIGHT_G, 0);
			writePWM(htim3, 0);
		}
		break;
	}
}
 8000f04:	e08b      	b.n	800101e <pedestrian_fsm+0x12e>
		if (timer_timeout(PEDES_TIMEOUT_TIMER))
 8000f06:	2002      	movs	r0, #2
 8000f08:	f7ff fd86 	bl	8000a18 <timer_timeout>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <pedestrian_fsm+0x28>
			pedesMode = PEDES_STOP;
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <pedestrian_fsm+0x138>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
		if (isButtonPressed(P_BUTTON))
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f7ff f917 	bl	800014c <isButtonPressed>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00f      	beq.n	8000f44 <pedestrian_fsm+0x54>
			setTimer(PEDES_TIMEOUT_TIMER, (led_red_time + led_green_time + led_yellow_time) * 1000);
 8000f24:	4b41      	ldr	r3, [pc, #260]	; (800102c <pedestrian_fsm+0x13c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b41      	ldr	r3, [pc, #260]	; (8001030 <pedestrian_fsm+0x140>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	441a      	add	r2, r3
 8000f2e:	4b41      	ldr	r3, [pc, #260]	; (8001034 <pedestrian_fsm+0x144>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f7ff fd4a 	bl	80009d8 <setTimer>
		switch (traffic2Mode)
 8000f44:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <pedestrian_fsm+0x148>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d83f      	bhi.n	8000fcc <pedestrian_fsm+0xdc>
 8000f4c:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <pedestrian_fsm+0x64>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000f7f 	.word	0x08000f7f
 8000f5c:	08000f99 	.word	0x08000f99
 8000f60:	08000fb3 	.word	0x08000fb3
			writePin(PLIGHT_R, 1);
 8000f64:	2101      	movs	r1, #1
 8000f66:	2004      	movs	r0, #4
 8000f68:	f7ff f9be 	bl	80002e8 <writePin>
			writePin(PLIGHT_G, 0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2005      	movs	r0, #5
 8000f70:	f7ff f9ba 	bl	80002e8 <writePin>
			writePWM(htim3, 0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff f9d0 	bl	800031c <writePWM>
			break;
 8000f7c:	e027      	b.n	8000fce <pedestrian_fsm+0xde>
			writePin(PLIGHT_R, 1);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2004      	movs	r0, #4
 8000f82:	f7ff f9b1 	bl	80002e8 <writePin>
			writePin(PLIGHT_G, 0);
 8000f86:	2100      	movs	r1, #0
 8000f88:	2005      	movs	r0, #5
 8000f8a:	f7ff f9ad 	bl	80002e8 <writePin>
			writePWM(htim3, 0);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff f9c3 	bl	800031c <writePWM>
			break;
 8000f96:	e01a      	b.n	8000fce <pedestrian_fsm+0xde>
			writePin(PLIGHT_R, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f7ff f9a4 	bl	80002e8 <writePin>
			writePin(PLIGHT_G, 1);
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	2005      	movs	r0, #5
 8000fa4:	f7ff f9a0 	bl	80002e8 <writePin>
			writePWM(htim3, 0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff f9b6 	bl	800031c <writePWM>
			break;
 8000fb0:	e00d      	b.n	8000fce <pedestrian_fsm+0xde>
			writePin(PLIGHT_R, 1);
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f7ff f997 	bl	80002e8 <writePin>
			writePin(PLIGHT_G, 1);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2005      	movs	r0, #5
 8000fbe:	f7ff f993 	bl	80002e8 <writePin>
			writePWM(htim3, 10);
 8000fc2:	210a      	movs	r1, #10
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff f9a9 	bl	800031c <writePWM>
			break;
 8000fca:	e000      	b.n	8000fce <pedestrian_fsm+0xde>
			break;
 8000fcc:	bf00      	nop
		break;
 8000fce:	e026      	b.n	800101e <pedestrian_fsm+0x12e>
		if (isButtonPressed(P_BUTTON))
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f7ff f8bb 	bl	800014c <isButtonPressed>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <pedestrian_fsm+0x114>
			pedesMode = PEDES_RUN;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <pedestrian_fsm+0x138>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
			setTimer(PEDES_TIMEOUT_TIMER, (led_red_time + led_green_time + led_yellow_time) * 1000);
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <pedestrian_fsm+0x13c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <pedestrian_fsm+0x140>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	441a      	add	r2, r3
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <pedestrian_fsm+0x144>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff fceb 	bl	80009d8 <setTimer>
		break;
 8001002:	e00b      	b.n	800101c <pedestrian_fsm+0x12c>
			writePin(PLIGHT_R, 0);
 8001004:	2100      	movs	r1, #0
 8001006:	2004      	movs	r0, #4
 8001008:	f7ff f96e 	bl	80002e8 <writePin>
			writePin(PLIGHT_G, 0);
 800100c:	2100      	movs	r1, #0
 800100e:	2005      	movs	r0, #5
 8001010:	f7ff f96a 	bl	80002e8 <writePin>
			writePWM(htim3, 0);
 8001014:	2100      	movs	r1, #0
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff f980 	bl	800031c <writePWM>
		break;
 800101c:	bf00      	nop
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000090 	.word	0x20000090
 800102c:	20000094 	.word	0x20000094
 8001030:	20000098 	.word	0x20000098
 8001034:	2000009c 	.word	0x2000009c
 8001038:	20000242 	.word	0x20000242

0800103c <main_fsm>:
 * Mode switch function
 * switch to appopriate function
 */

void main_fsm(TIM_HandleTypeDef* htim3, UART_HandleTypeDef* huart2)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	switch (trafficFsmMode)
 8001046:	4b44      	ldr	r3, [pc, #272]	; (8001158 <main_fsm+0x11c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d87d      	bhi.n	800114a <main_fsm+0x10e>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <main_fsm+0x18>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	08001065 	.word	0x08001065
 8001058:	080010a5 	.word	0x080010a5
 800105c:	080010fd 	.word	0x080010fd
 8001060:	08001123 	.word	0x08001123
	{
	case TRAFFIC_FSM_INIT:
		//Initialize necessary variables
		//TODO
		trafficFsmMode = AUTOMATIC;
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <main_fsm+0x11c>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
		writePin(TRAFFIC1_A, 0);
 800106a:	2100      	movs	r1, #0
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff f93b 	bl	80002e8 <writePin>
		writePin(TRAFFIC1_B, 0);
 8001072:	2100      	movs	r1, #0
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff f937 	bl	80002e8 <writePin>
		writePin(TRAFFIC2_A, 0);
 800107a:	2100      	movs	r1, #0
 800107c:	2002      	movs	r0, #2
 800107e:	f7ff f933 	bl	80002e8 <writePin>
		writePin(TRAFFIC2_B, 0);
 8001082:	2100      	movs	r1, #0
 8001084:	2003      	movs	r0, #3
 8001086:	f7ff f92f 	bl	80002e8 <writePin>
		writePin(PLIGHT_R, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	2004      	movs	r0, #4
 800108e:	f7ff f92b 	bl	80002e8 <writePin>
		writePin(PLIGHT_G, 0);
 8001092:	2100      	movs	r1, #0
 8001094:	2005      	movs	r0, #5
 8001096:	f7ff f927 	bl	80002e8 <writePin>
		setTimer(COUNTDOWN_TIMER, 10);
 800109a:	210a      	movs	r1, #10
 800109c:	2003      	movs	r0, #3
 800109e:	f7ff fc9b 	bl	80009d8 <setTimer>
		break;
 80010a2:	e055      	b.n	8001150 <main_fsm+0x114>
	case AUTOMATIC:
		//Default mode
		//Typical auto traffic light
		//Implement the function below
		//TODO
		if (isButtonPressed(BUTTON_1))
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff f851 	bl	800014c <isButtonPressed>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <main_fsm+0x7c>
		{
			trafficFsmMode = MANUAL;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <main_fsm+0x11c>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e004      	b.n	80010c2 <main_fsm+0x86>
		}
		else
		{
			pedestrian_fsm(htim3);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff19 	bl	8000ef0 <pedestrian_fsm>
			traffic_fsm_auto();
 80010be:	f7ff fd07 	bl	8000ad0 <traffic_fsm_auto>
		}
		if (timer_timeout(COUNTDOWN_TIMER))
 80010c2:	2003      	movs	r0, #3
 80010c4:	f7ff fca8 	bl	8000a18 <timer_timeout>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d03f      	beq.n	800114e <main_fsm+0x112>
		{
			HAL_UART_Transmit(huart2, writeStr, sprintf(writeStr, "!LED7SEG:%d#\r\n", timer_remaining(PEDES_TIMEOUT_TIMER)), 1000);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f7ff fcb6 	bl	8000a40 <timer_remaining>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4920      	ldr	r1, [pc, #128]	; (800115c <main_fsm+0x120>)
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <main_fsm+0x124>)
 80010dc:	f002 f91a 	bl	8003314 <siprintf>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	491d      	ldr	r1, [pc, #116]	; (8001160 <main_fsm+0x124>)
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	f001 ff75 	bl	8002fda <HAL_UART_Transmit>
			//HAL_UART_Transmit(huart2, writeStr, sprintf(writeStr, "!2:%d#\r\n", timer_remaining(TRAFFIC2_TIMER)), 1000);
			setTimer(COUNTDOWN_TIMER, 1000);
 80010f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff fc6f 	bl	80009d8 <setTimer>
		}
		break;
 80010fa:	e028      	b.n	800114e <main_fsm+0x112>
	case MANUAL:
		//Pressing BUTTON1 while in AUTOMATIC mode will switch to MANUAL mode
		//In MANUAL mode, BUTTON2 will manually switch to another state of traffic light
		//BUTTON3 will switch to the previous state of the traffic light
		//Implement the function below
		if (isButtonPressed(BUTTON_1))
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff f825 	bl	800014c <isButtonPressed>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d009      	beq.n	800111c <main_fsm+0xe0>
		{
			trafficFsmMode = TUNING;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <main_fsm+0x11c>)
 800110a:	2203      	movs	r2, #3
 800110c:	701a      	strb	r2, [r3, #0]
			tuning_mode = TUNE_GREEN;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <main_fsm+0x128>)
 8001110:	2202      	movs	r2, #2
 8001112:	601a      	str	r2, [r3, #0]
			pedesMode = PEDES_STOP;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <main_fsm+0x12c>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
		else
		{
			//pedestrian_fsm(htim3);
			traffic_fsm_manual();
		}
		break;
 800111a:	e019      	b.n	8001150 <main_fsm+0x114>
			traffic_fsm_manual();
 800111c:	f7ff fde8 	bl	8000cf0 <traffic_fsm_manual>
		break;
 8001120:	e016      	b.n	8001150 <main_fsm+0x114>
		//In TUNING mode, BUTTON2 will choose the LED we want to tune
		//BUTTON3 will increase the duration by 1 per press, by 10 per long press
		//Implement TUNING mode
		//TODO
		//pedesMode = PEDES_STOP;
		if (isButtonPressed(BUTTON_1))
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff f812 	bl	800014c <isButtonPressed>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00a      	beq.n	8001144 <main_fsm+0x108>
		{
			led_red_time = led_yellow_time + led_green_time;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <main_fsm+0x130>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <main_fsm+0x134>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <main_fsm+0x138>)
 800113a:	6013      	str	r3, [r2, #0]
			trafficFsmMode = AUTOMATIC;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <main_fsm+0x11c>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
		{
			//pedesMode = PEDES_STOP;
			//pedestrian_fsm(htim3);
			tuning_fsm();
		}
		break;
 8001142:	e005      	b.n	8001150 <main_fsm+0x114>
			tuning_fsm();
 8001144:	f7ff fe66 	bl	8000e14 <tuning_fsm>
		break;
 8001148:	e002      	b.n	8001150 <main_fsm+0x114>
	default:
		break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <main_fsm+0x114>
		break;
 800114e:	bf00      	nop
	}
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000240 	.word	0x20000240
 800115c:	08003c20 	.word	0x08003c20
 8001160:	20000248 	.word	0x20000248
 8001164:	20000244 	.word	0x20000244
 8001168:	20000090 	.word	0x20000090
 800116c:	2000009c 	.word	0x2000009c
 8001170:	20000098 	.word	0x20000098
 8001174:	20000094 	.word	0x20000094

08001178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800119e:	f7ff fc15 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f002 f88b 	bl	80032bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff f8c7 	bl	8000338 <main>
  bx lr
 80011aa:	4770      	bx	lr
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80011b4:	08003c94 	.word	0x08003c94
  ldr r2, =_sbss
 80011b8:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80011bc:	20000268 	.word	0x20000268

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x28>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f923 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff faaa 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f93b 	bl	800148a <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f903 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000008c 	.word	0x2000008c
 8001248:	200000a4 	.word	0x200000a4
 800124c:	200000a0 	.word	0x200000a0

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <HAL_IncTick+0x20>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	200000a4 	.word	0x200000a4
 8001270:	20000254 	.word	0x20000254

08001274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000254 	.word	0x20000254

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <__NVIC_EnableIRQ+0x34>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff90 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff2d 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff42 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff90 	bl	8001378 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5f 	bl	8001324 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff35 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e169      	b.n	800178c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8158 	bne.w	8001786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a9a      	ldr	r2, [pc, #616]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d05e      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014e0:	4a98      	ldr	r2, [pc, #608]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d875      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014e6:	4a98      	ldr	r2, [pc, #608]	; (8001748 <HAL_GPIO_Init+0x2a4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d058      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014ec:	4a96      	ldr	r2, [pc, #600]	; (8001748 <HAL_GPIO_Init+0x2a4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d86f      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014f2:	4a96      	ldr	r2, [pc, #600]	; (800174c <HAL_GPIO_Init+0x2a8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d052      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <HAL_GPIO_Init+0x2a8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d869      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014fe:	4a94      	ldr	r2, [pc, #592]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04c      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001504:	4a92      	ldr	r2, [pc, #584]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d863      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800150a:	4a92      	ldr	r2, [pc, #584]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d046      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001510:	4a90      	ldr	r2, [pc, #576]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d85d      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d82a      	bhi.n	8001570 <HAL_GPIO_Init+0xcc>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d859      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <HAL_GPIO_Init+0x80>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	0800159f 	.word	0x0800159f
 8001528:	08001579 	.word	0x08001579
 800152c:	0800158b 	.word	0x0800158b
 8001530:	080015cd 	.word	0x080015cd
 8001534:	080015d3 	.word	0x080015d3
 8001538:	080015d3 	.word	0x080015d3
 800153c:	080015d3 	.word	0x080015d3
 8001540:	080015d3 	.word	0x080015d3
 8001544:	080015d3 	.word	0x080015d3
 8001548:	080015d3 	.word	0x080015d3
 800154c:	080015d3 	.word	0x080015d3
 8001550:	080015d3 	.word	0x080015d3
 8001554:	080015d3 	.word	0x080015d3
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015d3 	.word	0x080015d3
 8001560:	080015d3 	.word	0x080015d3
 8001564:	080015d3 	.word	0x080015d3
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	4a79      	ldr	r2, [pc, #484]	; (8001758 <HAL_GPIO_Init+0x2b4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001576:	e02c      	b.n	80015d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e029      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	e024      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	3308      	adds	r3, #8
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e01f      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e01a      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a6:	2304      	movs	r3, #4
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e013      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	611a      	str	r2, [r3, #16]
          break;
 80015be:	e009      	b.n	80015d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	615a      	str	r2, [r3, #20]
          break;
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          break;
 80015d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d801      	bhi.n	80015de <HAL_GPIO_Init+0x13a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_Init+0x13e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d802      	bhi.n	80015f0 <HAL_GPIO_Init+0x14c>
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x152>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	3b08      	subs	r3, #8
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	210f      	movs	r1, #15
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	6a39      	ldr	r1, [r7, #32]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80b1 	beq.w	8001786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a4c      	ldr	r2, [pc, #304]	; (800175c <HAL_GPIO_Init+0x2b8>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_GPIO_Init+0x2b8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a40      	ldr	r2, [pc, #256]	; (8001764 <HAL_GPIO_Init+0x2c0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d013      	beq.n	8001690 <HAL_GPIO_Init+0x1ec>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3f      	ldr	r2, [pc, #252]	; (8001768 <HAL_GPIO_Init+0x2c4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00d      	beq.n	800168c <HAL_GPIO_Init+0x1e8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3e      	ldr	r2, [pc, #248]	; (800176c <HAL_GPIO_Init+0x2c8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0x1e4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <HAL_GPIO_Init+0x2cc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_GPIO_Init+0x1e0>
 8001680:	2303      	movs	r3, #3
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001684:	2304      	movs	r3, #4
 8001686:	e004      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001688:	2302      	movs	r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001690:	2300      	movs	r3, #0
 8001692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001694:	f002 0203 	and.w	r2, r2, #3
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	4093      	lsls	r3, r2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a2:	492f      	ldr	r1, [pc, #188]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	492c      	ldr	r1, [pc, #176]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4928      	ldr	r1, [pc, #160]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4922      	ldr	r1, [pc, #136]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	491e      	ldr	r1, [pc, #120]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4918      	ldr	r1, [pc, #96]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	4914      	ldr	r1, [pc, #80]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d021      	beq.n	8001778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
 8001740:	e021      	b.n	8001786 <HAL_GPIO_Init+0x2e2>
 8001742:	bf00      	nop
 8001744:	10320000 	.word	0x10320000
 8001748:	10310000 	.word	0x10310000
 800174c:	10220000 	.word	0x10220000
 8001750:	10210000 	.word	0x10210000
 8001754:	10120000 	.word	0x10120000
 8001758:	10110000 	.word	0x10110000
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40011000 	.word	0x40011000
 8001770:	40011400 	.word	0x40011400
 8001774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_GPIO_Init+0x304>)
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	43db      	mvns	r3, r3
 8001780:	4909      	ldr	r1, [pc, #36]	; (80017a8 <HAL_GPIO_Init+0x304>)
 8001782:	4013      	ands	r3, r2
 8001784:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	3301      	adds	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	f47f ae8e 	bne.w	80014b8 <HAL_GPIO_Init+0x14>
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	372c      	adds	r7, #44	; 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f6:	e003      	b.n	8001800 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	041a      	lsls	r2, r3, #16
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f806 	bl	800183c <HAL_GPIO_EXTI_Callback>
  }
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e272      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8087 	beq.w	800197e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001870:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b04      	cmp	r3, #4
 800187a:	d00c      	beq.n	8001896 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800187c:	4b8f      	ldr	r3, [pc, #572]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d112      	bne.n	80018ae <HAL_RCC_OscConfig+0x5e>
 8001888:	4b8c      	ldr	r3, [pc, #560]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d10b      	bne.n	80018ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	4b89      	ldr	r3, [pc, #548]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d06c      	beq.n	800197c <HAL_RCC_OscConfig+0x12c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d168      	bne.n	800197c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e24c      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x76>
 80018b8:	4b80      	ldr	r3, [pc, #512]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a7f      	ldr	r2, [pc, #508]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e02e      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x98>
 80018ce:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b78      	ldr	r3, [pc, #480]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a77      	ldr	r2, [pc, #476]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0xbc>
 80018f2:	4b72      	ldr	r3, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a71      	ldr	r2, [pc, #452]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 800190c:	4b6b      	ldr	r3, [pc, #428]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6a      	ldr	r2, [pc, #424]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a67      	ldr	r2, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fca2 	bl	8001274 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fc9e 	bl	8001274 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e200      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xe4>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fc8e 	bl	8001274 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fc8a 	bl	8001274 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1ec      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x10c>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d063      	beq.n	8001a52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198a:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001996:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d11c      	bne.n	80019dc <HAL_RCC_OscConfig+0x18c>
 80019a2:	4b46      	ldr	r3, [pc, #280]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d116      	bne.n	80019dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_RCC_OscConfig+0x176>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e1c0      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4939      	ldr	r1, [pc, #228]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	e03a      	b.n	8001a52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fc43 	bl	8001274 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fc3f 	bl	8001274 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e1a1      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4927      	ldr	r1, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc22 	bl	8001274 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc1e 	bl	8001274 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e180      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03a      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d019      	beq.n	8001a9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fc02 	bl	8001274 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fbfe 	bl	8001274 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e160      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f000 fad8 	bl	8002048 <RCC_Delay>
 8001a98:	e01c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fbe8 	bl	8001274 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa6:	e00f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fbe4 	bl	8001274 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d908      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e146      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	42420000 	.word	0x42420000
 8001ac4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b92      	ldr	r3, [pc, #584]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e9      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a6 	beq.w	8001c2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10d      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a87      	ldr	r2, [pc, #540]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b85      	ldr	r3, [pc, #532]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b82      	ldr	r3, [pc, #520]	; (8001d18 <HAL_RCC_OscConfig+0x4c8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d118      	bne.n	8001b4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1a:	4b7f      	ldr	r3, [pc, #508]	; (8001d18 <HAL_RCC_OscConfig+0x4c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a7e      	ldr	r2, [pc, #504]	; (8001d18 <HAL_RCC_OscConfig+0x4c8>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fba5 	bl	8001274 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff fba1 	bl	8001274 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e103      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	4b75      	ldr	r3, [pc, #468]	; (8001d18 <HAL_RCC_OscConfig+0x4c8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x312>
 8001b54:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a6e      	ldr	r2, [pc, #440]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	e02d      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x334>
 8001b6a:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a69      	ldr	r2, [pc, #420]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a66      	ldr	r2, [pc, #408]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	e01c      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x356>
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a60      	ldr	r2, [pc, #384]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6213      	str	r3, [r2, #32]
 8001b98:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a5d      	ldr	r2, [pc, #372]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	e00b      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001ba6:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a5a      	ldr	r2, [pc, #360]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a57      	ldr	r2, [pc, #348]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d015      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fb55 	bl	8001274 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff fb51 	bl	8001274 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0b1      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ee      	beq.n	8001bce <HAL_RCC_OscConfig+0x37e>
 8001bf0:	e014      	b.n	8001c1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb3f 	bl	8001274 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fb3b 	bl	8001274 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e09b      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ee      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d105      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a3b      	ldr	r2, [pc, #236]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8087 	beq.w	8001d46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c38:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d061      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d146      	bne.n	8001cda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <HAL_RCC_OscConfig+0x4cc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb0f 	bl	8001274 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fb0b 	bl	8001274 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e06d      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d108      	bne.n	8001c94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4921      	ldr	r1, [pc, #132]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a19      	ldr	r1, [r3, #32]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	491b      	ldr	r1, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x4cc>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fadf 	bl	8001274 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff fadb 	bl	8001274 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e03d      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x46a>
 8001cd8:	e035      	b.n	8001d46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_RCC_OscConfig+0x4cc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fac8 	bl	8001274 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff fac4 	bl	8001274 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e026      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x498>
 8001d06:	e01e      	b.n	8001d46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e019      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_OscConfig+0x500>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0d0      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4965      	ldr	r1, [pc, #404]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b8      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	494d      	ldr	r1, [pc, #308]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d040      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d115      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e07f      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e073      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e06b      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f023 0203 	bic.w	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4936      	ldr	r1, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e44:	f7ff fa16 	bl	8001274 <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff fa12 	bl	8001274 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e053      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 020c 	and.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1eb      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d210      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4922      	ldr	r1, [pc, #136]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e032      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4916      	ldr	r1, [pc, #88]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee2:	f000 f821 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	490a      	ldr	r1, [pc, #40]	; (8001f1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	5ccb      	ldrb	r3, [r1, r3]
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1cc>)
 8001efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1d0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f974 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08003c40 	.word	0x08003c40
 8001f20:	2000008c 	.word	0x2000008c
 8001f24:	200000a0 	.word	0x200000a0

08001f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b490      	push	{r4, r7}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f30:	1d3c      	adds	r4, r7, #4
 8001f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f38:	f240 2301 	movw	r3, #513	; 0x201
 8001f3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x40>
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x46>
 8001f66:	e02b      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f6a:	623b      	str	r3, [r7, #32]
      break;
 8001f6c:	e02b      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3328      	adds	r3, #40	; 0x28
 8001f78:	443b      	add	r3, r7
 8001f7a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f7e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0c5b      	lsrs	r3, r3, #17
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	3328      	adds	r3, #40	; 0x28
 8001f96:	443b      	add	r3, r7
 8001f98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fa2:	fb03 f202 	mul.w	r2, r3, r2
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	e004      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	623b      	str	r3, [r7, #32]
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fc2:	623b      	str	r3, [r7, #32]
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc90      	pop	{r4, r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	08003c30 	.word	0x08003c30
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	007a1200 	.word	0x007a1200
 8001fe0:	003d0900 	.word	0x003d0900

08001fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	2000008c 	.word	0x2000008c

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff2 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08003c50 	.word	0x08003c50

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffde 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	08003c50 	.word	0x08003c50

08002048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <RCC_Delay+0x34>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <RCC_Delay+0x38>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0a5b      	lsrs	r3, r3, #9
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002064:	bf00      	nop
  }
  while (Delay --);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	60fa      	str	r2, [r7, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f9      	bne.n	8002064 <RCC_Delay+0x1c>
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	2000008c 	.word	0x2000008c
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fb76 	bl	800079c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 fc28 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e03a      	b.n	80021b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_TIM_Base_Start_IT+0x98>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00e      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d009      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d111      	bne.n	80021a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b06      	cmp	r3, #6
 800218c:	d010      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219e:	e007      	b.n	80021b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800

080021c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e041      	b.n	800225e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f839 	bl	8002266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 fb86 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_TIM_PWM_Start+0x24>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e022      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d109      	bne.n	80022b6 <HAL_TIM_PWM_Start+0x3e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e015      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d109      	bne.n	80022d0 <HAL_TIM_PWM_Start+0x58>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e008      	b.n	80022e2 <HAL_TIM_PWM_Start+0x6a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e05e      	b.n	80023a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_PWM_Start+0x82>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f8:	e013      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d104      	bne.n	800230a <HAL_TIM_PWM_Start+0x92>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002308:	e00b      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d104      	bne.n	800231a <HAL_TIM_PWM_Start+0xa2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002318:	e003      	b.n	8002322 <HAL_TIM_PWM_Start+0xaa>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fd74 	bl	8002e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_TIM_PWM_Start+0x138>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d107      	bne.n	800234a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_TIM_PWM_Start+0x138>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_TIM_PWM_Start+0xfa>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235c:	d009      	beq.n	8002372 <HAL_TIM_PWM_Start+0xfa>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <HAL_TIM_PWM_Start+0x13c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_TIM_PWM_Start+0xfa>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_TIM_PWM_Start+0x140>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d111      	bne.n	8002396 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b06      	cmp	r3, #6
 8002382:	d010      	beq.n	80023a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002394:	e007      	b.n	80023a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800

080023bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d122      	bne.n	8002418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0202 	mvn.w	r2, #2
 80023e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa6f 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa62 	bl	80028d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fa71 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d122      	bne.n	800246c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b04      	cmp	r3, #4
 8002432:	d11b      	bne.n	800246c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0204 	mvn.w	r2, #4
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa45 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa38 	bl	80028d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fa47 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d122      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b08      	cmp	r3, #8
 8002486:	d11b      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0208 	mvn.w	r2, #8
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa1b 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa0e 	bl	80028d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fa1d 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d122      	bne.n	8002514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d11b      	bne.n	8002514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0210 	mvn.w	r2, #16
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2208      	movs	r2, #8
 80024ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f9f1 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f9e4 	bl	80028d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f9f3 	bl	80028f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0201 	mvn.w	r2, #1
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f8ea 	bl	8000714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d10e      	bne.n	800256c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d107      	bne.n	800256c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fce1 	bl	8002f2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f9b7 	bl	8002906 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0220 	mvn.w	r2, #32
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fcac 	bl	8002f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e0ac      	b.n	8002740 <HAL_TIM_PWM_ConfigChannel+0x174>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	f200 809f 	bhi.w	8002734 <HAL_TIM_PWM_ConfigChannel+0x168>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	08002631 	.word	0x08002631
 8002600:	08002735 	.word	0x08002735
 8002604:	08002735 	.word	0x08002735
 8002608:	08002735 	.word	0x08002735
 800260c:	08002671 	.word	0x08002671
 8002610:	08002735 	.word	0x08002735
 8002614:	08002735 	.word	0x08002735
 8002618:	08002735 	.word	0x08002735
 800261c:	080026b3 	.word	0x080026b3
 8002620:	08002735 	.word	0x08002735
 8002624:	08002735 	.word	0x08002735
 8002628:	08002735 	.word	0x08002735
 800262c:	080026f3 	.word	0x080026f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f9d0 	bl	80029dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	619a      	str	r2, [r3, #24]
      break;
 800266e:	e062      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fa16 	bl	8002aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6999      	ldr	r1, [r3, #24]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	021a      	lsls	r2, r3, #8
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]
      break;
 80026b0:	e041      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fa5f 	bl	8002b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0208 	orr.w	r2, r2, #8
 80026cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0204 	bic.w	r2, r2, #4
 80026dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69d9      	ldr	r1, [r3, #28]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	61da      	str	r2, [r3, #28]
      break;
 80026f0:	e021      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 faa9 	bl	8002c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69d9      	ldr	r1, [r3, #28]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	61da      	str	r2, [r3, #28]
      break;
 8002732:	e000      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIM_ConfigClockSource+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e0b3      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x180>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002786:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d03e      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0xd0>
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	f200 8087 	bhi.w	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a6:	f000 8085 	beq.w	80028b4 <HAL_TIM_ConfigClockSource+0x16c>
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d87f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d01a      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xa2>
 80027b4:	2b70      	cmp	r3, #112	; 0x70
 80027b6:	d87b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d050      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x116>
 80027bc:	2b60      	cmp	r3, #96	; 0x60
 80027be:	d877      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d03c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xf6>
 80027c4:	2b50      	cmp	r3, #80	; 0x50
 80027c6:	d873      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d058      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x136>
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d86f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d064      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d86b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d060      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d867      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d05a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027e8:	e062      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f000 faee 	bl	8002dda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800280c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
      break;
 8002816:	e04e      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f000 fad7 	bl	8002dda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	609a      	str	r2, [r3, #8]
      break;
 800283c:	e03b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 fa4e 	bl	8002cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2150      	movs	r1, #80	; 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f000 faa5 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800285c:	e02b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 fa6c 	bl	8002d48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2160      	movs	r1, #96	; 0x60
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fa95 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800287c:	e01b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f000 fa2e 	bl	8002cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fa85 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800289c:	e00b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f000 fa7c 	bl	8002da6 <TIM_ITRx_SetConfig>
        break;
 80028ae:	e002      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b0:	bf00      	nop
 80028b2:	e000      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a29      	ldr	r2, [pc, #164]	; (80029d0 <TIM_Base_SetConfig+0xb8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00b      	beq.n	8002948 <TIM_Base_SetConfig+0x30>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d007      	beq.n	8002948 <TIM_Base_SetConfig+0x30>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <TIM_Base_SetConfig+0xbc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_Base_SetConfig+0x30>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <TIM_Base_SetConfig+0xc0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <TIM_Base_SetConfig+0xb8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00b      	beq.n	800297a <TIM_Base_SetConfig+0x62>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002968:	d007      	beq.n	800297a <TIM_Base_SetConfig+0x62>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <TIM_Base_SetConfig+0xbc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_Base_SetConfig+0x62>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <TIM_Base_SetConfig+0xc0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <TIM_Base_SetConfig+0xb8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d103      	bne.n	80029c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	615a      	str	r2, [r3, #20]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800

080029dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f023 0302 	bic.w	r3, r3, #2
 8002a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <TIM_OC1_SetConfig+0xc8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d10c      	bne.n	8002a52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 0308 	bic.w	r3, r3, #8
 8002a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <TIM_OC1_SetConfig+0xc8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d111      	bne.n	8002a7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00

08002aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f023 0210 	bic.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0320 	bic.w	r3, r3, #32
 8002af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <TIM_OC2_SetConfig+0xd0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d10d      	bne.n	8002b24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <TIM_OC2_SetConfig+0xd0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d113      	bne.n	8002b54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	621a      	str	r2, [r3, #32]
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012c00 	.word	0x40012c00

08002b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <TIM_OC3_SetConfig+0xd0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10d      	bne.n	8002bf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <TIM_OC3_SetConfig+0xd0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	621a      	str	r2, [r3, #32]
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40012c00 	.word	0x40012c00

08002c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	031b      	lsls	r3, r3, #12
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <TIM_OC4_SetConfig+0x98>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d109      	bne.n	8002cc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	40012c00 	.word	0x40012c00

08002cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0201 	bic.w	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f023 030a 	bic.w	r3, r3, #10
 8002d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f023 0210 	bic.w	r2, r3, #16
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	031b      	lsls	r3, r3, #12
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f043 0307 	orr.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b087      	sub	sp, #28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	021a      	lsls	r2, r3, #8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e046      	b.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec4:	d009      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800

08002f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e03f      	b.n	8002fd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd fc82 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f905 	bl	8003194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b08a      	sub	sp, #40	; 0x28
 8002fde:	af02      	add	r7, sp, #8
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d17c      	bne.n	80030f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_UART_Transmit+0x2c>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e075      	b.n	80030f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_UART_Transmit+0x3e>
 8003014:	2302      	movs	r3, #2
 8003016:	e06e      	b.n	80030f6 <HAL_UART_Transmit+0x11c>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2221      	movs	r2, #33	; 0x21
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302e:	f7fe f921 	bl	8001274 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003048:	d108      	bne.n	800305c <HAL_UART_Transmit+0x82>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d104      	bne.n	800305c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	e003      	b.n	8003064 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800306c:	e02a      	b.n	80030c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2200      	movs	r2, #0
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f840 	bl	80030fe <UART_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e036      	b.n	80030f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800309c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	3302      	adds	r3, #2
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	e007      	b.n	80030b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	3301      	adds	r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1cf      	bne.n	800306e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f810 	bl	80030fe <UART_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e006      	b.n	80030f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310e:	e02c      	b.n	800316a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003116:	d028      	beq.n	800316a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <UART_WaitOnFlagUntilTimeout+0x30>
 800311e:	f7fe f8a9 	bl	8001274 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	429a      	cmp	r2, r3
 800312c:	d21d      	bcs.n	800316a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800313c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e00f      	b.n	800318a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	429a      	cmp	r2, r3
 8003186:	d0c3      	beq.n	8003110 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ce:	f023 030c 	bic.w	r3, r3, #12
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	430b      	orrs	r3, r1
 80031da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <UART_SetConfig+0x114>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d103      	bne.n	8003204 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031fc:	f7fe ff10 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	e002      	b.n	800320a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003204:	f7fe fef8 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8003208:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009a      	lsls	r2, r3, #2
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <UART_SetConfig+0x118>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	0119      	lsls	r1, r3, #4
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <UART_SetConfig+0x118>)
 8003242:	fba3 0302 	umull	r0, r3, r3, r2
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2064      	movs	r0, #100	; 0x64
 800324a:	fb00 f303 	mul.w	r3, r0, r3
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	3332      	adds	r3, #50	; 0x32
 8003254:	4a15      	ldr	r2, [pc, #84]	; (80032ac <UART_SetConfig+0x118>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003260:	4419      	add	r1, r3
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009a      	lsls	r2, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fbb2 f2f3 	udiv	r2, r2, r3
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <UART_SetConfig+0x118>)
 800327a:	fba3 0302 	umull	r0, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2064      	movs	r0, #100	; 0x64
 8003282:	fb00 f303 	mul.w	r3, r0, r3
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	; 0x32
 800328c:	4a07      	ldr	r2, [pc, #28]	; (80032ac <UART_SetConfig+0x118>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	440a      	add	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40013800 	.word	0x40013800
 80032ac:	51eb851f 	.word	0x51eb851f

080032b0 <__errno>:
 80032b0:	4b01      	ldr	r3, [pc, #4]	; (80032b8 <__errno+0x8>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	200000a8 	.word	0x200000a8

080032bc <__libc_init_array>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2600      	movs	r6, #0
 80032c0:	4d0c      	ldr	r5, [pc, #48]	; (80032f4 <__libc_init_array+0x38>)
 80032c2:	4c0d      	ldr	r4, [pc, #52]	; (80032f8 <__libc_init_array+0x3c>)
 80032c4:	1b64      	subs	r4, r4, r5
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	42a6      	cmp	r6, r4
 80032ca:	d109      	bne.n	80032e0 <__libc_init_array+0x24>
 80032cc:	f000 fc9c 	bl	8003c08 <_init>
 80032d0:	2600      	movs	r6, #0
 80032d2:	4d0a      	ldr	r5, [pc, #40]	; (80032fc <__libc_init_array+0x40>)
 80032d4:	4c0a      	ldr	r4, [pc, #40]	; (8003300 <__libc_init_array+0x44>)
 80032d6:	1b64      	subs	r4, r4, r5
 80032d8:	10a4      	asrs	r4, r4, #2
 80032da:	42a6      	cmp	r6, r4
 80032dc:	d105      	bne.n	80032ea <__libc_init_array+0x2e>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e4:	4798      	blx	r3
 80032e6:	3601      	adds	r6, #1
 80032e8:	e7ee      	b.n	80032c8 <__libc_init_array+0xc>
 80032ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ee:	4798      	blx	r3
 80032f0:	3601      	adds	r6, #1
 80032f2:	e7f2      	b.n	80032da <__libc_init_array+0x1e>
 80032f4:	08003c8c 	.word	0x08003c8c
 80032f8:	08003c8c 	.word	0x08003c8c
 80032fc:	08003c8c 	.word	0x08003c8c
 8003300:	08003c90 	.word	0x08003c90

08003304 <memset>:
 8003304:	4603      	mov	r3, r0
 8003306:	4402      	add	r2, r0
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	f803 1b01 	strb.w	r1, [r3], #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <siprintf>:
 8003314:	b40e      	push	{r1, r2, r3}
 8003316:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800331a:	b500      	push	{lr}
 800331c:	b09c      	sub	sp, #112	; 0x70
 800331e:	ab1d      	add	r3, sp, #116	; 0x74
 8003320:	9002      	str	r0, [sp, #8]
 8003322:	9006      	str	r0, [sp, #24]
 8003324:	9107      	str	r1, [sp, #28]
 8003326:	9104      	str	r1, [sp, #16]
 8003328:	4808      	ldr	r0, [pc, #32]	; (800334c <siprintf+0x38>)
 800332a:	4909      	ldr	r1, [pc, #36]	; (8003350 <siprintf+0x3c>)
 800332c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003330:	9105      	str	r1, [sp, #20]
 8003332:	6800      	ldr	r0, [r0, #0]
 8003334:	a902      	add	r1, sp, #8
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	f000 f868 	bl	800340c <_svfiprintf_r>
 800333c:	2200      	movs	r2, #0
 800333e:	9b02      	ldr	r3, [sp, #8]
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	b01c      	add	sp, #112	; 0x70
 8003344:	f85d eb04 	ldr.w	lr, [sp], #4
 8003348:	b003      	add	sp, #12
 800334a:	4770      	bx	lr
 800334c:	200000a8 	.word	0x200000a8
 8003350:	ffff0208 	.word	0xffff0208

08003354 <__ssputs_r>:
 8003354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003358:	688e      	ldr	r6, [r1, #8]
 800335a:	4682      	mov	sl, r0
 800335c:	429e      	cmp	r6, r3
 800335e:	460c      	mov	r4, r1
 8003360:	4690      	mov	r8, r2
 8003362:	461f      	mov	r7, r3
 8003364:	d838      	bhi.n	80033d8 <__ssputs_r+0x84>
 8003366:	898a      	ldrh	r2, [r1, #12]
 8003368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800336c:	d032      	beq.n	80033d4 <__ssputs_r+0x80>
 800336e:	6825      	ldr	r5, [r4, #0]
 8003370:	6909      	ldr	r1, [r1, #16]
 8003372:	3301      	adds	r3, #1
 8003374:	eba5 0901 	sub.w	r9, r5, r1
 8003378:	6965      	ldr	r5, [r4, #20]
 800337a:	444b      	add	r3, r9
 800337c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003384:	106d      	asrs	r5, r5, #1
 8003386:	429d      	cmp	r5, r3
 8003388:	bf38      	it	cc
 800338a:	461d      	movcc	r5, r3
 800338c:	0553      	lsls	r3, r2, #21
 800338e:	d531      	bpl.n	80033f4 <__ssputs_r+0xa0>
 8003390:	4629      	mov	r1, r5
 8003392:	f000 fb6f 	bl	8003a74 <_malloc_r>
 8003396:	4606      	mov	r6, r0
 8003398:	b950      	cbnz	r0, 80033b0 <__ssputs_r+0x5c>
 800339a:	230c      	movs	r3, #12
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f8ca 3000 	str.w	r3, [sl]
 80033a4:	89a3      	ldrh	r3, [r4, #12]
 80033a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033aa:	81a3      	strh	r3, [r4, #12]
 80033ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b0:	464a      	mov	r2, r9
 80033b2:	6921      	ldr	r1, [r4, #16]
 80033b4:	f000 face 	bl	8003954 <memcpy>
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c2:	81a3      	strh	r3, [r4, #12]
 80033c4:	6126      	str	r6, [r4, #16]
 80033c6:	444e      	add	r6, r9
 80033c8:	6026      	str	r6, [r4, #0]
 80033ca:	463e      	mov	r6, r7
 80033cc:	6165      	str	r5, [r4, #20]
 80033ce:	eba5 0509 	sub.w	r5, r5, r9
 80033d2:	60a5      	str	r5, [r4, #8]
 80033d4:	42be      	cmp	r6, r7
 80033d6:	d900      	bls.n	80033da <__ssputs_r+0x86>
 80033d8:	463e      	mov	r6, r7
 80033da:	4632      	mov	r2, r6
 80033dc:	4641      	mov	r1, r8
 80033de:	6820      	ldr	r0, [r4, #0]
 80033e0:	f000 fac6 	bl	8003970 <memmove>
 80033e4:	68a3      	ldr	r3, [r4, #8]
 80033e6:	2000      	movs	r0, #0
 80033e8:	1b9b      	subs	r3, r3, r6
 80033ea:	60a3      	str	r3, [r4, #8]
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	4433      	add	r3, r6
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	e7db      	b.n	80033ac <__ssputs_r+0x58>
 80033f4:	462a      	mov	r2, r5
 80033f6:	f000 fbb1 	bl	8003b5c <_realloc_r>
 80033fa:	4606      	mov	r6, r0
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d1e1      	bne.n	80033c4 <__ssputs_r+0x70>
 8003400:	4650      	mov	r0, sl
 8003402:	6921      	ldr	r1, [r4, #16]
 8003404:	f000 face 	bl	80039a4 <_free_r>
 8003408:	e7c7      	b.n	800339a <__ssputs_r+0x46>
	...

0800340c <_svfiprintf_r>:
 800340c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003410:	4698      	mov	r8, r3
 8003412:	898b      	ldrh	r3, [r1, #12]
 8003414:	4607      	mov	r7, r0
 8003416:	061b      	lsls	r3, r3, #24
 8003418:	460d      	mov	r5, r1
 800341a:	4614      	mov	r4, r2
 800341c:	b09d      	sub	sp, #116	; 0x74
 800341e:	d50e      	bpl.n	800343e <_svfiprintf_r+0x32>
 8003420:	690b      	ldr	r3, [r1, #16]
 8003422:	b963      	cbnz	r3, 800343e <_svfiprintf_r+0x32>
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	f000 fb25 	bl	8003a74 <_malloc_r>
 800342a:	6028      	str	r0, [r5, #0]
 800342c:	6128      	str	r0, [r5, #16]
 800342e:	b920      	cbnz	r0, 800343a <_svfiprintf_r+0x2e>
 8003430:	230c      	movs	r3, #12
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	e0d1      	b.n	80035de <_svfiprintf_r+0x1d2>
 800343a:	2340      	movs	r3, #64	; 0x40
 800343c:	616b      	str	r3, [r5, #20]
 800343e:	2300      	movs	r3, #0
 8003440:	9309      	str	r3, [sp, #36]	; 0x24
 8003442:	2320      	movs	r3, #32
 8003444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003448:	2330      	movs	r3, #48	; 0x30
 800344a:	f04f 0901 	mov.w	r9, #1
 800344e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003452:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035f8 <_svfiprintf_r+0x1ec>
 8003456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800345a:	4623      	mov	r3, r4
 800345c:	469a      	mov	sl, r3
 800345e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003462:	b10a      	cbz	r2, 8003468 <_svfiprintf_r+0x5c>
 8003464:	2a25      	cmp	r2, #37	; 0x25
 8003466:	d1f9      	bne.n	800345c <_svfiprintf_r+0x50>
 8003468:	ebba 0b04 	subs.w	fp, sl, r4
 800346c:	d00b      	beq.n	8003486 <_svfiprintf_r+0x7a>
 800346e:	465b      	mov	r3, fp
 8003470:	4622      	mov	r2, r4
 8003472:	4629      	mov	r1, r5
 8003474:	4638      	mov	r0, r7
 8003476:	f7ff ff6d 	bl	8003354 <__ssputs_r>
 800347a:	3001      	adds	r0, #1
 800347c:	f000 80aa 	beq.w	80035d4 <_svfiprintf_r+0x1c8>
 8003480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003482:	445a      	add	r2, fp
 8003484:	9209      	str	r2, [sp, #36]	; 0x24
 8003486:	f89a 3000 	ldrb.w	r3, [sl]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80a2 	beq.w	80035d4 <_svfiprintf_r+0x1c8>
 8003490:	2300      	movs	r3, #0
 8003492:	f04f 32ff 	mov.w	r2, #4294967295
 8003496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800349a:	f10a 0a01 	add.w	sl, sl, #1
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	9307      	str	r3, [sp, #28]
 80034a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034a6:	931a      	str	r3, [sp, #104]	; 0x68
 80034a8:	4654      	mov	r4, sl
 80034aa:	2205      	movs	r2, #5
 80034ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b0:	4851      	ldr	r0, [pc, #324]	; (80035f8 <_svfiprintf_r+0x1ec>)
 80034b2:	f000 fa41 	bl	8003938 <memchr>
 80034b6:	9a04      	ldr	r2, [sp, #16]
 80034b8:	b9d8      	cbnz	r0, 80034f2 <_svfiprintf_r+0xe6>
 80034ba:	06d0      	lsls	r0, r2, #27
 80034bc:	bf44      	itt	mi
 80034be:	2320      	movmi	r3, #32
 80034c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034c4:	0711      	lsls	r1, r2, #28
 80034c6:	bf44      	itt	mi
 80034c8:	232b      	movmi	r3, #43	; 0x2b
 80034ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ce:	f89a 3000 	ldrb.w	r3, [sl]
 80034d2:	2b2a      	cmp	r3, #42	; 0x2a
 80034d4:	d015      	beq.n	8003502 <_svfiprintf_r+0xf6>
 80034d6:	4654      	mov	r4, sl
 80034d8:	2000      	movs	r0, #0
 80034da:	f04f 0c0a 	mov.w	ip, #10
 80034de:	9a07      	ldr	r2, [sp, #28]
 80034e0:	4621      	mov	r1, r4
 80034e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e6:	3b30      	subs	r3, #48	; 0x30
 80034e8:	2b09      	cmp	r3, #9
 80034ea:	d94e      	bls.n	800358a <_svfiprintf_r+0x17e>
 80034ec:	b1b0      	cbz	r0, 800351c <_svfiprintf_r+0x110>
 80034ee:	9207      	str	r2, [sp, #28]
 80034f0:	e014      	b.n	800351c <_svfiprintf_r+0x110>
 80034f2:	eba0 0308 	sub.w	r3, r0, r8
 80034f6:	fa09 f303 	lsl.w	r3, r9, r3
 80034fa:	4313      	orrs	r3, r2
 80034fc:	46a2      	mov	sl, r4
 80034fe:	9304      	str	r3, [sp, #16]
 8003500:	e7d2      	b.n	80034a8 <_svfiprintf_r+0x9c>
 8003502:	9b03      	ldr	r3, [sp, #12]
 8003504:	1d19      	adds	r1, r3, #4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	9103      	str	r1, [sp, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	bfbb      	ittet	lt
 800350e:	425b      	neglt	r3, r3
 8003510:	f042 0202 	orrlt.w	r2, r2, #2
 8003514:	9307      	strge	r3, [sp, #28]
 8003516:	9307      	strlt	r3, [sp, #28]
 8003518:	bfb8      	it	lt
 800351a:	9204      	strlt	r2, [sp, #16]
 800351c:	7823      	ldrb	r3, [r4, #0]
 800351e:	2b2e      	cmp	r3, #46	; 0x2e
 8003520:	d10c      	bne.n	800353c <_svfiprintf_r+0x130>
 8003522:	7863      	ldrb	r3, [r4, #1]
 8003524:	2b2a      	cmp	r3, #42	; 0x2a
 8003526:	d135      	bne.n	8003594 <_svfiprintf_r+0x188>
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	3402      	adds	r4, #2
 800352c:	1d1a      	adds	r2, r3, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	9203      	str	r2, [sp, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	bfb8      	it	lt
 8003536:	f04f 33ff 	movlt.w	r3, #4294967295
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80035fc <_svfiprintf_r+0x1f0>
 8003540:	2203      	movs	r2, #3
 8003542:	4650      	mov	r0, sl
 8003544:	7821      	ldrb	r1, [r4, #0]
 8003546:	f000 f9f7 	bl	8003938 <memchr>
 800354a:	b140      	cbz	r0, 800355e <_svfiprintf_r+0x152>
 800354c:	2340      	movs	r3, #64	; 0x40
 800354e:	eba0 000a 	sub.w	r0, r0, sl
 8003552:	fa03 f000 	lsl.w	r0, r3, r0
 8003556:	9b04      	ldr	r3, [sp, #16]
 8003558:	3401      	adds	r4, #1
 800355a:	4303      	orrs	r3, r0
 800355c:	9304      	str	r3, [sp, #16]
 800355e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003562:	2206      	movs	r2, #6
 8003564:	4826      	ldr	r0, [pc, #152]	; (8003600 <_svfiprintf_r+0x1f4>)
 8003566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800356a:	f000 f9e5 	bl	8003938 <memchr>
 800356e:	2800      	cmp	r0, #0
 8003570:	d038      	beq.n	80035e4 <_svfiprintf_r+0x1d8>
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <_svfiprintf_r+0x1f8>)
 8003574:	bb1b      	cbnz	r3, 80035be <_svfiprintf_r+0x1b2>
 8003576:	9b03      	ldr	r3, [sp, #12]
 8003578:	3307      	adds	r3, #7
 800357a:	f023 0307 	bic.w	r3, r3, #7
 800357e:	3308      	adds	r3, #8
 8003580:	9303      	str	r3, [sp, #12]
 8003582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003584:	4433      	add	r3, r6
 8003586:	9309      	str	r3, [sp, #36]	; 0x24
 8003588:	e767      	b.n	800345a <_svfiprintf_r+0x4e>
 800358a:	460c      	mov	r4, r1
 800358c:	2001      	movs	r0, #1
 800358e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003592:	e7a5      	b.n	80034e0 <_svfiprintf_r+0xd4>
 8003594:	2300      	movs	r3, #0
 8003596:	f04f 0c0a 	mov.w	ip, #10
 800359a:	4619      	mov	r1, r3
 800359c:	3401      	adds	r4, #1
 800359e:	9305      	str	r3, [sp, #20]
 80035a0:	4620      	mov	r0, r4
 80035a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035a6:	3a30      	subs	r2, #48	; 0x30
 80035a8:	2a09      	cmp	r2, #9
 80035aa:	d903      	bls.n	80035b4 <_svfiprintf_r+0x1a8>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0c5      	beq.n	800353c <_svfiprintf_r+0x130>
 80035b0:	9105      	str	r1, [sp, #20]
 80035b2:	e7c3      	b.n	800353c <_svfiprintf_r+0x130>
 80035b4:	4604      	mov	r4, r0
 80035b6:	2301      	movs	r3, #1
 80035b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80035bc:	e7f0      	b.n	80035a0 <_svfiprintf_r+0x194>
 80035be:	ab03      	add	r3, sp, #12
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	462a      	mov	r2, r5
 80035c4:	4638      	mov	r0, r7
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <_svfiprintf_r+0x1fc>)
 80035c8:	a904      	add	r1, sp, #16
 80035ca:	f3af 8000 	nop.w
 80035ce:	1c42      	adds	r2, r0, #1
 80035d0:	4606      	mov	r6, r0
 80035d2:	d1d6      	bne.n	8003582 <_svfiprintf_r+0x176>
 80035d4:	89ab      	ldrh	r3, [r5, #12]
 80035d6:	065b      	lsls	r3, r3, #25
 80035d8:	f53f af2c 	bmi.w	8003434 <_svfiprintf_r+0x28>
 80035dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035de:	b01d      	add	sp, #116	; 0x74
 80035e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e4:	ab03      	add	r3, sp, #12
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	462a      	mov	r2, r5
 80035ea:	4638      	mov	r0, r7
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <_svfiprintf_r+0x1fc>)
 80035ee:	a904      	add	r1, sp, #16
 80035f0:	f000 f87c 	bl	80036ec <_printf_i>
 80035f4:	e7eb      	b.n	80035ce <_svfiprintf_r+0x1c2>
 80035f6:	bf00      	nop
 80035f8:	08003c58 	.word	0x08003c58
 80035fc:	08003c5e 	.word	0x08003c5e
 8003600:	08003c62 	.word	0x08003c62
 8003604:	00000000 	.word	0x00000000
 8003608:	08003355 	.word	0x08003355

0800360c <_printf_common>:
 800360c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	4616      	mov	r6, r2
 8003612:	4699      	mov	r9, r3
 8003614:	688a      	ldr	r2, [r1, #8]
 8003616:	690b      	ldr	r3, [r1, #16]
 8003618:	4607      	mov	r7, r0
 800361a:	4293      	cmp	r3, r2
 800361c:	bfb8      	it	lt
 800361e:	4613      	movlt	r3, r2
 8003620:	6033      	str	r3, [r6, #0]
 8003622:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003626:	460c      	mov	r4, r1
 8003628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800362c:	b10a      	cbz	r2, 8003632 <_printf_common+0x26>
 800362e:	3301      	adds	r3, #1
 8003630:	6033      	str	r3, [r6, #0]
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	0699      	lsls	r1, r3, #26
 8003636:	bf42      	ittt	mi
 8003638:	6833      	ldrmi	r3, [r6, #0]
 800363a:	3302      	addmi	r3, #2
 800363c:	6033      	strmi	r3, [r6, #0]
 800363e:	6825      	ldr	r5, [r4, #0]
 8003640:	f015 0506 	ands.w	r5, r5, #6
 8003644:	d106      	bne.n	8003654 <_printf_common+0x48>
 8003646:	f104 0a19 	add.w	sl, r4, #25
 800364a:	68e3      	ldr	r3, [r4, #12]
 800364c:	6832      	ldr	r2, [r6, #0]
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	42ab      	cmp	r3, r5
 8003652:	dc28      	bgt.n	80036a6 <_printf_common+0x9a>
 8003654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003658:	1e13      	subs	r3, r2, #0
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	bf18      	it	ne
 800365e:	2301      	movne	r3, #1
 8003660:	0692      	lsls	r2, r2, #26
 8003662:	d42d      	bmi.n	80036c0 <_printf_common+0xb4>
 8003664:	4649      	mov	r1, r9
 8003666:	4638      	mov	r0, r7
 8003668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800366c:	47c0      	blx	r8
 800366e:	3001      	adds	r0, #1
 8003670:	d020      	beq.n	80036b4 <_printf_common+0xa8>
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	68e5      	ldr	r5, [r4, #12]
 8003676:	f003 0306 	and.w	r3, r3, #6
 800367a:	2b04      	cmp	r3, #4
 800367c:	bf18      	it	ne
 800367e:	2500      	movne	r5, #0
 8003680:	6832      	ldr	r2, [r6, #0]
 8003682:	f04f 0600 	mov.w	r6, #0
 8003686:	68a3      	ldr	r3, [r4, #8]
 8003688:	bf08      	it	eq
 800368a:	1aad      	subeq	r5, r5, r2
 800368c:	6922      	ldr	r2, [r4, #16]
 800368e:	bf08      	it	eq
 8003690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003694:	4293      	cmp	r3, r2
 8003696:	bfc4      	itt	gt
 8003698:	1a9b      	subgt	r3, r3, r2
 800369a:	18ed      	addgt	r5, r5, r3
 800369c:	341a      	adds	r4, #26
 800369e:	42b5      	cmp	r5, r6
 80036a0:	d11a      	bne.n	80036d8 <_printf_common+0xcc>
 80036a2:	2000      	movs	r0, #0
 80036a4:	e008      	b.n	80036b8 <_printf_common+0xac>
 80036a6:	2301      	movs	r3, #1
 80036a8:	4652      	mov	r2, sl
 80036aa:	4649      	mov	r1, r9
 80036ac:	4638      	mov	r0, r7
 80036ae:	47c0      	blx	r8
 80036b0:	3001      	adds	r0, #1
 80036b2:	d103      	bne.n	80036bc <_printf_common+0xb0>
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	3501      	adds	r5, #1
 80036be:	e7c4      	b.n	800364a <_printf_common+0x3e>
 80036c0:	2030      	movs	r0, #48	; 0x30
 80036c2:	18e1      	adds	r1, r4, r3
 80036c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ce:	4422      	add	r2, r4
 80036d0:	3302      	adds	r3, #2
 80036d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d6:	e7c5      	b.n	8003664 <_printf_common+0x58>
 80036d8:	2301      	movs	r3, #1
 80036da:	4622      	mov	r2, r4
 80036dc:	4649      	mov	r1, r9
 80036de:	4638      	mov	r0, r7
 80036e0:	47c0      	blx	r8
 80036e2:	3001      	adds	r0, #1
 80036e4:	d0e6      	beq.n	80036b4 <_printf_common+0xa8>
 80036e6:	3601      	adds	r6, #1
 80036e8:	e7d9      	b.n	800369e <_printf_common+0x92>
	...

080036ec <_printf_i>:
 80036ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036f0:	7e0f      	ldrb	r7, [r1, #24]
 80036f2:	4691      	mov	r9, r2
 80036f4:	2f78      	cmp	r7, #120	; 0x78
 80036f6:	4680      	mov	r8, r0
 80036f8:	460c      	mov	r4, r1
 80036fa:	469a      	mov	sl, r3
 80036fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003702:	d807      	bhi.n	8003714 <_printf_i+0x28>
 8003704:	2f62      	cmp	r7, #98	; 0x62
 8003706:	d80a      	bhi.n	800371e <_printf_i+0x32>
 8003708:	2f00      	cmp	r7, #0
 800370a:	f000 80d9 	beq.w	80038c0 <_printf_i+0x1d4>
 800370e:	2f58      	cmp	r7, #88	; 0x58
 8003710:	f000 80a4 	beq.w	800385c <_printf_i+0x170>
 8003714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800371c:	e03a      	b.n	8003794 <_printf_i+0xa8>
 800371e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003722:	2b15      	cmp	r3, #21
 8003724:	d8f6      	bhi.n	8003714 <_printf_i+0x28>
 8003726:	a101      	add	r1, pc, #4	; (adr r1, 800372c <_printf_i+0x40>)
 8003728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800372c:	08003785 	.word	0x08003785
 8003730:	08003799 	.word	0x08003799
 8003734:	08003715 	.word	0x08003715
 8003738:	08003715 	.word	0x08003715
 800373c:	08003715 	.word	0x08003715
 8003740:	08003715 	.word	0x08003715
 8003744:	08003799 	.word	0x08003799
 8003748:	08003715 	.word	0x08003715
 800374c:	08003715 	.word	0x08003715
 8003750:	08003715 	.word	0x08003715
 8003754:	08003715 	.word	0x08003715
 8003758:	080038a7 	.word	0x080038a7
 800375c:	080037c9 	.word	0x080037c9
 8003760:	08003889 	.word	0x08003889
 8003764:	08003715 	.word	0x08003715
 8003768:	08003715 	.word	0x08003715
 800376c:	080038c9 	.word	0x080038c9
 8003770:	08003715 	.word	0x08003715
 8003774:	080037c9 	.word	0x080037c9
 8003778:	08003715 	.word	0x08003715
 800377c:	08003715 	.word	0x08003715
 8003780:	08003891 	.word	0x08003891
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	1d1a      	adds	r2, r3, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	602a      	str	r2, [r5, #0]
 800378c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003794:	2301      	movs	r3, #1
 8003796:	e0a4      	b.n	80038e2 <_printf_i+0x1f6>
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	6829      	ldr	r1, [r5, #0]
 800379c:	0606      	lsls	r6, r0, #24
 800379e:	f101 0304 	add.w	r3, r1, #4
 80037a2:	d50a      	bpl.n	80037ba <_printf_i+0xce>
 80037a4:	680e      	ldr	r6, [r1, #0]
 80037a6:	602b      	str	r3, [r5, #0]
 80037a8:	2e00      	cmp	r6, #0
 80037aa:	da03      	bge.n	80037b4 <_printf_i+0xc8>
 80037ac:	232d      	movs	r3, #45	; 0x2d
 80037ae:	4276      	negs	r6, r6
 80037b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b4:	230a      	movs	r3, #10
 80037b6:	485e      	ldr	r0, [pc, #376]	; (8003930 <_printf_i+0x244>)
 80037b8:	e019      	b.n	80037ee <_printf_i+0x102>
 80037ba:	680e      	ldr	r6, [r1, #0]
 80037bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037c0:	602b      	str	r3, [r5, #0]
 80037c2:	bf18      	it	ne
 80037c4:	b236      	sxthne	r6, r6
 80037c6:	e7ef      	b.n	80037a8 <_printf_i+0xbc>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	1d19      	adds	r1, r3, #4
 80037ce:	6029      	str	r1, [r5, #0]
 80037d0:	0601      	lsls	r1, r0, #24
 80037d2:	d501      	bpl.n	80037d8 <_printf_i+0xec>
 80037d4:	681e      	ldr	r6, [r3, #0]
 80037d6:	e002      	b.n	80037de <_printf_i+0xf2>
 80037d8:	0646      	lsls	r6, r0, #25
 80037da:	d5fb      	bpl.n	80037d4 <_printf_i+0xe8>
 80037dc:	881e      	ldrh	r6, [r3, #0]
 80037de:	2f6f      	cmp	r7, #111	; 0x6f
 80037e0:	bf0c      	ite	eq
 80037e2:	2308      	moveq	r3, #8
 80037e4:	230a      	movne	r3, #10
 80037e6:	4852      	ldr	r0, [pc, #328]	; (8003930 <_printf_i+0x244>)
 80037e8:	2100      	movs	r1, #0
 80037ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ee:	6865      	ldr	r5, [r4, #4]
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	bfa8      	it	ge
 80037f4:	6821      	ldrge	r1, [r4, #0]
 80037f6:	60a5      	str	r5, [r4, #8]
 80037f8:	bfa4      	itt	ge
 80037fa:	f021 0104 	bicge.w	r1, r1, #4
 80037fe:	6021      	strge	r1, [r4, #0]
 8003800:	b90e      	cbnz	r6, 8003806 <_printf_i+0x11a>
 8003802:	2d00      	cmp	r5, #0
 8003804:	d04d      	beq.n	80038a2 <_printf_i+0x1b6>
 8003806:	4615      	mov	r5, r2
 8003808:	fbb6 f1f3 	udiv	r1, r6, r3
 800380c:	fb03 6711 	mls	r7, r3, r1, r6
 8003810:	5dc7      	ldrb	r7, [r0, r7]
 8003812:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003816:	4637      	mov	r7, r6
 8003818:	42bb      	cmp	r3, r7
 800381a:	460e      	mov	r6, r1
 800381c:	d9f4      	bls.n	8003808 <_printf_i+0x11c>
 800381e:	2b08      	cmp	r3, #8
 8003820:	d10b      	bne.n	800383a <_printf_i+0x14e>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	07de      	lsls	r6, r3, #31
 8003826:	d508      	bpl.n	800383a <_printf_i+0x14e>
 8003828:	6923      	ldr	r3, [r4, #16]
 800382a:	6861      	ldr	r1, [r4, #4]
 800382c:	4299      	cmp	r1, r3
 800382e:	bfde      	ittt	le
 8003830:	2330      	movle	r3, #48	; 0x30
 8003832:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003836:	f105 35ff 	addle.w	r5, r5, #4294967295
 800383a:	1b52      	subs	r2, r2, r5
 800383c:	6122      	str	r2, [r4, #16]
 800383e:	464b      	mov	r3, r9
 8003840:	4621      	mov	r1, r4
 8003842:	4640      	mov	r0, r8
 8003844:	f8cd a000 	str.w	sl, [sp]
 8003848:	aa03      	add	r2, sp, #12
 800384a:	f7ff fedf 	bl	800360c <_printf_common>
 800384e:	3001      	adds	r0, #1
 8003850:	d14c      	bne.n	80038ec <_printf_i+0x200>
 8003852:	f04f 30ff 	mov.w	r0, #4294967295
 8003856:	b004      	add	sp, #16
 8003858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385c:	4834      	ldr	r0, [pc, #208]	; (8003930 <_printf_i+0x244>)
 800385e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003862:	6829      	ldr	r1, [r5, #0]
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	f851 6b04 	ldr.w	r6, [r1], #4
 800386a:	6029      	str	r1, [r5, #0]
 800386c:	061d      	lsls	r5, r3, #24
 800386e:	d514      	bpl.n	800389a <_printf_i+0x1ae>
 8003870:	07df      	lsls	r7, r3, #31
 8003872:	bf44      	itt	mi
 8003874:	f043 0320 	orrmi.w	r3, r3, #32
 8003878:	6023      	strmi	r3, [r4, #0]
 800387a:	b91e      	cbnz	r6, 8003884 <_printf_i+0x198>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	f023 0320 	bic.w	r3, r3, #32
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	2310      	movs	r3, #16
 8003886:	e7af      	b.n	80037e8 <_printf_i+0xfc>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	f043 0320 	orr.w	r3, r3, #32
 800388e:	6023      	str	r3, [r4, #0]
 8003890:	2378      	movs	r3, #120	; 0x78
 8003892:	4828      	ldr	r0, [pc, #160]	; (8003934 <_printf_i+0x248>)
 8003894:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003898:	e7e3      	b.n	8003862 <_printf_i+0x176>
 800389a:	0659      	lsls	r1, r3, #25
 800389c:	bf48      	it	mi
 800389e:	b2b6      	uxthmi	r6, r6
 80038a0:	e7e6      	b.n	8003870 <_printf_i+0x184>
 80038a2:	4615      	mov	r5, r2
 80038a4:	e7bb      	b.n	800381e <_printf_i+0x132>
 80038a6:	682b      	ldr	r3, [r5, #0]
 80038a8:	6826      	ldr	r6, [r4, #0]
 80038aa:	1d18      	adds	r0, r3, #4
 80038ac:	6961      	ldr	r1, [r4, #20]
 80038ae:	6028      	str	r0, [r5, #0]
 80038b0:	0635      	lsls	r5, r6, #24
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	d501      	bpl.n	80038ba <_printf_i+0x1ce>
 80038b6:	6019      	str	r1, [r3, #0]
 80038b8:	e002      	b.n	80038c0 <_printf_i+0x1d4>
 80038ba:	0670      	lsls	r0, r6, #25
 80038bc:	d5fb      	bpl.n	80038b6 <_printf_i+0x1ca>
 80038be:	8019      	strh	r1, [r3, #0]
 80038c0:	2300      	movs	r3, #0
 80038c2:	4615      	mov	r5, r2
 80038c4:	6123      	str	r3, [r4, #16]
 80038c6:	e7ba      	b.n	800383e <_printf_i+0x152>
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	2100      	movs	r1, #0
 80038cc:	1d1a      	adds	r2, r3, #4
 80038ce:	602a      	str	r2, [r5, #0]
 80038d0:	681d      	ldr	r5, [r3, #0]
 80038d2:	6862      	ldr	r2, [r4, #4]
 80038d4:	4628      	mov	r0, r5
 80038d6:	f000 f82f 	bl	8003938 <memchr>
 80038da:	b108      	cbz	r0, 80038e0 <_printf_i+0x1f4>
 80038dc:	1b40      	subs	r0, r0, r5
 80038de:	6060      	str	r0, [r4, #4]
 80038e0:	6863      	ldr	r3, [r4, #4]
 80038e2:	6123      	str	r3, [r4, #16]
 80038e4:	2300      	movs	r3, #0
 80038e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ea:	e7a8      	b.n	800383e <_printf_i+0x152>
 80038ec:	462a      	mov	r2, r5
 80038ee:	4649      	mov	r1, r9
 80038f0:	4640      	mov	r0, r8
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	47d0      	blx	sl
 80038f6:	3001      	adds	r0, #1
 80038f8:	d0ab      	beq.n	8003852 <_printf_i+0x166>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	079b      	lsls	r3, r3, #30
 80038fe:	d413      	bmi.n	8003928 <_printf_i+0x23c>
 8003900:	68e0      	ldr	r0, [r4, #12]
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	4298      	cmp	r0, r3
 8003906:	bfb8      	it	lt
 8003908:	4618      	movlt	r0, r3
 800390a:	e7a4      	b.n	8003856 <_printf_i+0x16a>
 800390c:	2301      	movs	r3, #1
 800390e:	4632      	mov	r2, r6
 8003910:	4649      	mov	r1, r9
 8003912:	4640      	mov	r0, r8
 8003914:	47d0      	blx	sl
 8003916:	3001      	adds	r0, #1
 8003918:	d09b      	beq.n	8003852 <_printf_i+0x166>
 800391a:	3501      	adds	r5, #1
 800391c:	68e3      	ldr	r3, [r4, #12]
 800391e:	9903      	ldr	r1, [sp, #12]
 8003920:	1a5b      	subs	r3, r3, r1
 8003922:	42ab      	cmp	r3, r5
 8003924:	dcf2      	bgt.n	800390c <_printf_i+0x220>
 8003926:	e7eb      	b.n	8003900 <_printf_i+0x214>
 8003928:	2500      	movs	r5, #0
 800392a:	f104 0619 	add.w	r6, r4, #25
 800392e:	e7f5      	b.n	800391c <_printf_i+0x230>
 8003930:	08003c69 	.word	0x08003c69
 8003934:	08003c7a 	.word	0x08003c7a

08003938 <memchr>:
 8003938:	4603      	mov	r3, r0
 800393a:	b510      	push	{r4, lr}
 800393c:	b2c9      	uxtb	r1, r1
 800393e:	4402      	add	r2, r0
 8003940:	4293      	cmp	r3, r2
 8003942:	4618      	mov	r0, r3
 8003944:	d101      	bne.n	800394a <memchr+0x12>
 8003946:	2000      	movs	r0, #0
 8003948:	e003      	b.n	8003952 <memchr+0x1a>
 800394a:	7804      	ldrb	r4, [r0, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	428c      	cmp	r4, r1
 8003950:	d1f6      	bne.n	8003940 <memchr+0x8>
 8003952:	bd10      	pop	{r4, pc}

08003954 <memcpy>:
 8003954:	440a      	add	r2, r1
 8003956:	4291      	cmp	r1, r2
 8003958:	f100 33ff 	add.w	r3, r0, #4294967295
 800395c:	d100      	bne.n	8003960 <memcpy+0xc>
 800395e:	4770      	bx	lr
 8003960:	b510      	push	{r4, lr}
 8003962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003966:	4291      	cmp	r1, r2
 8003968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800396c:	d1f9      	bne.n	8003962 <memcpy+0xe>
 800396e:	bd10      	pop	{r4, pc}

08003970 <memmove>:
 8003970:	4288      	cmp	r0, r1
 8003972:	b510      	push	{r4, lr}
 8003974:	eb01 0402 	add.w	r4, r1, r2
 8003978:	d902      	bls.n	8003980 <memmove+0x10>
 800397a:	4284      	cmp	r4, r0
 800397c:	4623      	mov	r3, r4
 800397e:	d807      	bhi.n	8003990 <memmove+0x20>
 8003980:	1e43      	subs	r3, r0, #1
 8003982:	42a1      	cmp	r1, r4
 8003984:	d008      	beq.n	8003998 <memmove+0x28>
 8003986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800398a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800398e:	e7f8      	b.n	8003982 <memmove+0x12>
 8003990:	4601      	mov	r1, r0
 8003992:	4402      	add	r2, r0
 8003994:	428a      	cmp	r2, r1
 8003996:	d100      	bne.n	800399a <memmove+0x2a>
 8003998:	bd10      	pop	{r4, pc}
 800399a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800399e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039a2:	e7f7      	b.n	8003994 <memmove+0x24>

080039a4 <_free_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4605      	mov	r5, r0
 80039a8:	2900      	cmp	r1, #0
 80039aa:	d040      	beq.n	8003a2e <_free_r+0x8a>
 80039ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b0:	1f0c      	subs	r4, r1, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bfb8      	it	lt
 80039b6:	18e4      	addlt	r4, r4, r3
 80039b8:	f000 f910 	bl	8003bdc <__malloc_lock>
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <_free_r+0x8c>)
 80039be:	6813      	ldr	r3, [r2, #0]
 80039c0:	b933      	cbnz	r3, 80039d0 <_free_r+0x2c>
 80039c2:	6063      	str	r3, [r4, #4]
 80039c4:	6014      	str	r4, [r2, #0]
 80039c6:	4628      	mov	r0, r5
 80039c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039cc:	f000 b90c 	b.w	8003be8 <__malloc_unlock>
 80039d0:	42a3      	cmp	r3, r4
 80039d2:	d908      	bls.n	80039e6 <_free_r+0x42>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	1821      	adds	r1, r4, r0
 80039d8:	428b      	cmp	r3, r1
 80039da:	bf01      	itttt	eq
 80039dc:	6819      	ldreq	r1, [r3, #0]
 80039de:	685b      	ldreq	r3, [r3, #4]
 80039e0:	1809      	addeq	r1, r1, r0
 80039e2:	6021      	streq	r1, [r4, #0]
 80039e4:	e7ed      	b.n	80039c2 <_free_r+0x1e>
 80039e6:	461a      	mov	r2, r3
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	b10b      	cbz	r3, 80039f0 <_free_r+0x4c>
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d9fa      	bls.n	80039e6 <_free_r+0x42>
 80039f0:	6811      	ldr	r1, [r2, #0]
 80039f2:	1850      	adds	r0, r2, r1
 80039f4:	42a0      	cmp	r0, r4
 80039f6:	d10b      	bne.n	8003a10 <_free_r+0x6c>
 80039f8:	6820      	ldr	r0, [r4, #0]
 80039fa:	4401      	add	r1, r0
 80039fc:	1850      	adds	r0, r2, r1
 80039fe:	4283      	cmp	r3, r0
 8003a00:	6011      	str	r1, [r2, #0]
 8003a02:	d1e0      	bne.n	80039c6 <_free_r+0x22>
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4401      	add	r1, r0
 8003a0a:	6011      	str	r1, [r2, #0]
 8003a0c:	6053      	str	r3, [r2, #4]
 8003a0e:	e7da      	b.n	80039c6 <_free_r+0x22>
 8003a10:	d902      	bls.n	8003a18 <_free_r+0x74>
 8003a12:	230c      	movs	r3, #12
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	e7d6      	b.n	80039c6 <_free_r+0x22>
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	1821      	adds	r1, r4, r0
 8003a1c:	428b      	cmp	r3, r1
 8003a1e:	bf01      	itttt	eq
 8003a20:	6819      	ldreq	r1, [r3, #0]
 8003a22:	685b      	ldreq	r3, [r3, #4]
 8003a24:	1809      	addeq	r1, r1, r0
 8003a26:	6021      	streq	r1, [r4, #0]
 8003a28:	6063      	str	r3, [r4, #4]
 8003a2a:	6054      	str	r4, [r2, #4]
 8003a2c:	e7cb      	b.n	80039c6 <_free_r+0x22>
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20000258 	.word	0x20000258

08003a34 <sbrk_aligned>:
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	4e0e      	ldr	r6, [pc, #56]	; (8003a70 <sbrk_aligned+0x3c>)
 8003a38:	460c      	mov	r4, r1
 8003a3a:	6831      	ldr	r1, [r6, #0]
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	b911      	cbnz	r1, 8003a46 <sbrk_aligned+0x12>
 8003a40:	f000 f8bc 	bl	8003bbc <_sbrk_r>
 8003a44:	6030      	str	r0, [r6, #0]
 8003a46:	4621      	mov	r1, r4
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 f8b7 	bl	8003bbc <_sbrk_r>
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	d00a      	beq.n	8003a68 <sbrk_aligned+0x34>
 8003a52:	1cc4      	adds	r4, r0, #3
 8003a54:	f024 0403 	bic.w	r4, r4, #3
 8003a58:	42a0      	cmp	r0, r4
 8003a5a:	d007      	beq.n	8003a6c <sbrk_aligned+0x38>
 8003a5c:	1a21      	subs	r1, r4, r0
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f000 f8ac 	bl	8003bbc <_sbrk_r>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d101      	bne.n	8003a6c <sbrk_aligned+0x38>
 8003a68:	f04f 34ff 	mov.w	r4, #4294967295
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	2000025c 	.word	0x2000025c

08003a74 <_malloc_r>:
 8003a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a78:	1ccd      	adds	r5, r1, #3
 8003a7a:	f025 0503 	bic.w	r5, r5, #3
 8003a7e:	3508      	adds	r5, #8
 8003a80:	2d0c      	cmp	r5, #12
 8003a82:	bf38      	it	cc
 8003a84:	250c      	movcc	r5, #12
 8003a86:	2d00      	cmp	r5, #0
 8003a88:	4607      	mov	r7, r0
 8003a8a:	db01      	blt.n	8003a90 <_malloc_r+0x1c>
 8003a8c:	42a9      	cmp	r1, r5
 8003a8e:	d905      	bls.n	8003a9c <_malloc_r+0x28>
 8003a90:	230c      	movs	r3, #12
 8003a92:	2600      	movs	r6, #0
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	4630      	mov	r0, r6
 8003a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a9c:	4e2e      	ldr	r6, [pc, #184]	; (8003b58 <_malloc_r+0xe4>)
 8003a9e:	f000 f89d 	bl	8003bdc <__malloc_lock>
 8003aa2:	6833      	ldr	r3, [r6, #0]
 8003aa4:	461c      	mov	r4, r3
 8003aa6:	bb34      	cbnz	r4, 8003af6 <_malloc_r+0x82>
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4638      	mov	r0, r7
 8003aac:	f7ff ffc2 	bl	8003a34 <sbrk_aligned>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	d14d      	bne.n	8003b52 <_malloc_r+0xde>
 8003ab6:	6834      	ldr	r4, [r6, #0]
 8003ab8:	4626      	mov	r6, r4
 8003aba:	2e00      	cmp	r6, #0
 8003abc:	d140      	bne.n	8003b40 <_malloc_r+0xcc>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	4631      	mov	r1, r6
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	eb04 0803 	add.w	r8, r4, r3
 8003ac8:	f000 f878 	bl	8003bbc <_sbrk_r>
 8003acc:	4580      	cmp	r8, r0
 8003ace:	d13a      	bne.n	8003b46 <_malloc_r+0xd2>
 8003ad0:	6821      	ldr	r1, [r4, #0]
 8003ad2:	3503      	adds	r5, #3
 8003ad4:	1a6d      	subs	r5, r5, r1
 8003ad6:	f025 0503 	bic.w	r5, r5, #3
 8003ada:	3508      	adds	r5, #8
 8003adc:	2d0c      	cmp	r5, #12
 8003ade:	bf38      	it	cc
 8003ae0:	250c      	movcc	r5, #12
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	f7ff ffa5 	bl	8003a34 <sbrk_aligned>
 8003aea:	3001      	adds	r0, #1
 8003aec:	d02b      	beq.n	8003b46 <_malloc_r+0xd2>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	442b      	add	r3, r5
 8003af2:	6023      	str	r3, [r4, #0]
 8003af4:	e00e      	b.n	8003b14 <_malloc_r+0xa0>
 8003af6:	6822      	ldr	r2, [r4, #0]
 8003af8:	1b52      	subs	r2, r2, r5
 8003afa:	d41e      	bmi.n	8003b3a <_malloc_r+0xc6>
 8003afc:	2a0b      	cmp	r2, #11
 8003afe:	d916      	bls.n	8003b2e <_malloc_r+0xba>
 8003b00:	1961      	adds	r1, r4, r5
 8003b02:	42a3      	cmp	r3, r4
 8003b04:	6025      	str	r5, [r4, #0]
 8003b06:	bf18      	it	ne
 8003b08:	6059      	strne	r1, [r3, #4]
 8003b0a:	6863      	ldr	r3, [r4, #4]
 8003b0c:	bf08      	it	eq
 8003b0e:	6031      	streq	r1, [r6, #0]
 8003b10:	5162      	str	r2, [r4, r5]
 8003b12:	604b      	str	r3, [r1, #4]
 8003b14:	4638      	mov	r0, r7
 8003b16:	f104 060b 	add.w	r6, r4, #11
 8003b1a:	f000 f865 	bl	8003be8 <__malloc_unlock>
 8003b1e:	f026 0607 	bic.w	r6, r6, #7
 8003b22:	1d23      	adds	r3, r4, #4
 8003b24:	1af2      	subs	r2, r6, r3
 8003b26:	d0b6      	beq.n	8003a96 <_malloc_r+0x22>
 8003b28:	1b9b      	subs	r3, r3, r6
 8003b2a:	50a3      	str	r3, [r4, r2]
 8003b2c:	e7b3      	b.n	8003a96 <_malloc_r+0x22>
 8003b2e:	6862      	ldr	r2, [r4, #4]
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	bf0c      	ite	eq
 8003b34:	6032      	streq	r2, [r6, #0]
 8003b36:	605a      	strne	r2, [r3, #4]
 8003b38:	e7ec      	b.n	8003b14 <_malloc_r+0xa0>
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	6864      	ldr	r4, [r4, #4]
 8003b3e:	e7b2      	b.n	8003aa6 <_malloc_r+0x32>
 8003b40:	4634      	mov	r4, r6
 8003b42:	6876      	ldr	r6, [r6, #4]
 8003b44:	e7b9      	b.n	8003aba <_malloc_r+0x46>
 8003b46:	230c      	movs	r3, #12
 8003b48:	4638      	mov	r0, r7
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	f000 f84c 	bl	8003be8 <__malloc_unlock>
 8003b50:	e7a1      	b.n	8003a96 <_malloc_r+0x22>
 8003b52:	6025      	str	r5, [r4, #0]
 8003b54:	e7de      	b.n	8003b14 <_malloc_r+0xa0>
 8003b56:	bf00      	nop
 8003b58:	20000258 	.word	0x20000258

08003b5c <_realloc_r>:
 8003b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b60:	4680      	mov	r8, r0
 8003b62:	4614      	mov	r4, r2
 8003b64:	460e      	mov	r6, r1
 8003b66:	b921      	cbnz	r1, 8003b72 <_realloc_r+0x16>
 8003b68:	4611      	mov	r1, r2
 8003b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6e:	f7ff bf81 	b.w	8003a74 <_malloc_r>
 8003b72:	b92a      	cbnz	r2, 8003b80 <_realloc_r+0x24>
 8003b74:	f7ff ff16 	bl	80039a4 <_free_r>
 8003b78:	4625      	mov	r5, r4
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b80:	f000 f838 	bl	8003bf4 <_malloc_usable_size_r>
 8003b84:	4284      	cmp	r4, r0
 8003b86:	4607      	mov	r7, r0
 8003b88:	d802      	bhi.n	8003b90 <_realloc_r+0x34>
 8003b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b8e:	d812      	bhi.n	8003bb6 <_realloc_r+0x5a>
 8003b90:	4621      	mov	r1, r4
 8003b92:	4640      	mov	r0, r8
 8003b94:	f7ff ff6e 	bl	8003a74 <_malloc_r>
 8003b98:	4605      	mov	r5, r0
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d0ed      	beq.n	8003b7a <_realloc_r+0x1e>
 8003b9e:	42bc      	cmp	r4, r7
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	bf28      	it	cs
 8003ba6:	463a      	movcs	r2, r7
 8003ba8:	f7ff fed4 	bl	8003954 <memcpy>
 8003bac:	4631      	mov	r1, r6
 8003bae:	4640      	mov	r0, r8
 8003bb0:	f7ff fef8 	bl	80039a4 <_free_r>
 8003bb4:	e7e1      	b.n	8003b7a <_realloc_r+0x1e>
 8003bb6:	4635      	mov	r5, r6
 8003bb8:	e7df      	b.n	8003b7a <_realloc_r+0x1e>
	...

08003bbc <_sbrk_r>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	4d05      	ldr	r5, [pc, #20]	; (8003bd8 <_sbrk_r+0x1c>)
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	602b      	str	r3, [r5, #0]
 8003bc8:	f7fc feca 	bl	8000960 <_sbrk>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d102      	bne.n	8003bd6 <_sbrk_r+0x1a>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	b103      	cbz	r3, 8003bd6 <_sbrk_r+0x1a>
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	20000260 	.word	0x20000260

08003bdc <__malloc_lock>:
 8003bdc:	4801      	ldr	r0, [pc, #4]	; (8003be4 <__malloc_lock+0x8>)
 8003bde:	f000 b811 	b.w	8003c04 <__retarget_lock_acquire_recursive>
 8003be2:	bf00      	nop
 8003be4:	20000264 	.word	0x20000264

08003be8 <__malloc_unlock>:
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <__malloc_unlock+0x8>)
 8003bea:	f000 b80c 	b.w	8003c06 <__retarget_lock_release_recursive>
 8003bee:	bf00      	nop
 8003bf0:	20000264 	.word	0x20000264

08003bf4 <_malloc_usable_size_r>:
 8003bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf8:	1f18      	subs	r0, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bfbc      	itt	lt
 8003bfe:	580b      	ldrlt	r3, [r1, r0]
 8003c00:	18c0      	addlt	r0, r0, r3
 8003c02:	4770      	bx	lr

08003c04 <__retarget_lock_acquire_recursive>:
 8003c04:	4770      	bx	lr

08003c06 <__retarget_lock_release_recursive>:
 8003c06:	4770      	bx	lr

08003c08 <_init>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	bf00      	nop
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr

08003c14 <_fini>:
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	bf00      	nop
 8003c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1a:	bc08      	pop	{r3}
 8003c1c:	469e      	mov	lr, r3
 8003c1e:	4770      	bx	lr
